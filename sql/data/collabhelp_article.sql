-- MySQL dump 10.13  Distrib 5.7.17, for macos10.12 (x86_64)
--
-- Host: localhost    Database: collabhelp
-- ------------------------------------------------------
-- Server version	5.7.21

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Dumping data for table `article`
--

LOCK TABLES `article` WRITE;
/*!40000 ALTER TABLE `article` DISABLE KEYS */;
INSERT INTO `article` VALUES (8,'test Upcoming Bot Username Changes','test - Niall Murphy','Cisco Spark','2018-06-16 12:43:49','Bot,Username,Changes',0,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.<br><br>',NULL,NULL,'superadmin'),(9,'test Upcoming Bot Username Changes','test - Niall Murphy','Cisco Spark','2018-06-16 15:35:40','Bot,Username,Changes',0,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.<br><br>',NULL,NULL,'superadmin'),(10,'test Upcoming Bot Username Changes','test - Niall Murphy','Cisco Spark','2018-06-16 15:39:37','Bot,Username,Changes',0,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.<br><br>',NULL,NULL,'superadmin'),(11,'Upcoming Bot Username Changes','Niall Murphy','Cisco Spark','2018-06-16 15:54:32','Bot,Username,Changes',0,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.<br><br>',NULL,NULL,'superadmin'),(12,'Upcoming Bot Username Changes','Niall Murphy','Cisco Spark','2018-06-16 16:05:36','Bot,Username,Changes',0,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.<br><br>',NULL,NULL,'superadmin'),(15,'test Upcoming Bot Username Changes','test - Niall Murphy','Cisco Spark','2018-06-17 00:18:22','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.<br><br>',NULL,NULL,'superadmin'),(16,'test Upcoming Bot Username Changes','test - Niall Murphy','Administration','2018-06-17 07:46:30','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.<br><br>',NULL,NULL,'superadmin'),(17,'test Upcoming Bot Username Changes','test - Niall Murphy','Cisco Spark','2018-06-17 07:52:48','Bot,Username,Changes',1,'	 		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.<br><br>',NULL,NULL,'superadmin'),(18,'test Upcoming Bot Username Changes','test - Niall Murphy','Cisco Spark','2018-06-17 09:10:40','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.<br><br>',NULL,NULL,'superadmin'),(19,'test Upcoming Bot Username Changes','test - Niall Murphy','Cisco Spark','2018-06-17 09:23:56','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.<br><br>',NULL,NULL,'superadmin'),(20,'test Upcoming Bot Username Changes','test - Niall Murphy','Cisco Spark','2018-06-17 18:18:27','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(21,'test Upcoming Bot Username Changes','test - Niall Murphy','Cisco Spark','2018-06-18 16:36:04','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(22,'test Upcoming Bot Username Changes','test - Niall Murphy','Cisco Spark','2018-06-20 13:41:40','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(23,'adam - test Upcoming Bot Username Changes','test - Niall Murphy','Cisco Spark','2018-06-20 13:45:24','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(24,'Adam test Upcoming Bot Username Changes','test - Niall Murphy','Cisco Spark','2018-06-20 16:18:09','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(25,'adammm Upcoming Bot Username Changes','test - Niall Murphy','Cisco Spark','2018-06-20 16:31:02','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(26,'adam Upcoming Bot Username Changes','test - Niall Murphy','Administration','2018-06-20 17:23:36','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(27,'kong Upcoming Bot Username Changes','Niall Murphy','Cisco Spark','2018-06-20 17:27:53','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(28,'kkk Upcoming Bot Username Changes','test - Niall Murphy','Agent Interaction','2018-06-20 17:32:54','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(29,'zzz Upcoming Bot Username Changes','test - Niall Murphy','Calls','2018-06-20 17:35:55','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(30,'test Upcoming Bot Username Changes','test - Niall Murphy','Agent Interaction','2018-06-20 17:37:13','Bot,Username,Changes',1,'Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.<br>',NULL,NULL,'superadmin'),(32,'test Upcoming Bot Username Changes','test - Niall Murphy','Cisco Spark','2018-06-20 17:43:47','Bot,Username,Changes',1,'	\r\n		aaaaa',NULL,NULL,'superadmin'),(33,'test Upcoming Bot Username Changes','test - Niall Murphy','Cisco Spark','2018-06-20 17:51:35','Bot,Username,Changes',1,'	\r\n		sdasd',NULL,NULL,'superadmin'),(34,'test Upcoming Bot Username Changes','test - Niall Murphy','Agent Interaction','2018-06-20 17:55:26','Bot,Username,Changes',1,'	\r\n		cccccc',NULL,NULL,'superadmin'),(35,'test Upcoming Bot Username Changes','test - Niall Murphy','Cisco Spark','2018-06-20 18:35:38','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(36,'test Upcoming Bot Username Changes','test - Niall Murphy','Meetings','2018-06-21 00:43:03','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(37,'ddddd Upcoming Bot Username Changes','test - Niall Murphy','Cisco Spark','2018-06-21 00:45:19','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(38,'FFFFFFFF Upcoming Bot Username Changes','Niall Murphy','Calls','2018-06-21 08:32:35','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(39,'test Upcoming Bot Username Changes','test - Niall Murphy','Messages','2018-06-21 10:09:35','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(40,'adamkong Upcoming Bot Username Changes','Adam Kong','Messages','2018-06-21 10:17:20','Bot,Username,Changes',0,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(41,'Lily Upcoming Bot Username Changes','Niall Murphy','Messages','2018-06-21 10:33:43','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(42,'Lily Upcoming Bot Username Changes','Niall Murphy','Messages','2018-06-21 10:38:30','Bot,Username,Changes',0,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(43,'Tom Cat Upcoming Bot Username Changes','Adam Kong','Messages','2018-06-21 10:44:47','Tom,Cat,Pet',0,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(44,'Adam Kong Upcoming Bot Username Changes','Niall Murphy','Messages','2018-06-21 14:34:49','Tom,Cat,Pet',0,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(45,'Webex Teams - Upcoming Bot Username Changes','Adam Kong','Reports','2018-06-21 14:40:55','Bot,Username,Changes',0,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(46,'Webex Teams - Getting Started','Adam Kong','Reports','2018-06-21 15:24:03','Webex Teams',1,'	\r\n		<p>Hey there! Thanks for checking out Cisco Webex for Developers. If \r\nyou\'ve used Cisco Webex Meetings or Cisco Webex Teams (formerly Cisco \r\nSpark) you know how easy it is to meet and collaborate with your team \r\nmembers and customers.</p>\r\n            <p>The Webex for Developers program opens up the power behind the Webex platform to anyone seeking to extend the Webex experience.</p>\r\n            <p>Webex Meetings is a powerful conferencing solution that \r\nlets you connect with anyone, anywhere, in real time. By combining \r\nvideo, audio and content sharing, Webex Meetings creates an effective \r\nconferencing environment, leading to more productive meetings and \r\nincreased productivity. Developer information for Webex Meetings will \r\nsoon be available on this site. In the meantime, to get started with \r\ndeveloping for Webex Meetings, please see the <a href=\"https://developer.cisco.com/site/webex-developer/develop-test/getting-started/\" target=\"_blank\">Getting Started</a> guides over on Cisco DevNet. Keep reading for information about Webex Teams.</p>\r\n            <p>\r\n              Webex Teams makes staying in sync with your teammates and customers easy. \r\n              \r\n            </p>\r\n            <p>Conversations in Webex Teams take place in virtual \r\nmeeting rooms. Some rooms live for a few hours while others become \r\npermanent fixtures of your team\'s workflow with titles like <code class=\"light\">Daily Standup</code> or <code class=\"light\">Build Status</code>.\r\n Webex Teams allows conversations to flow seamlessly between messages, \r\nvideo calls, and real-time whiteboarding sessions. No other solution \r\nbrings together so many facets of collaboration into a single unified \r\nplatform.</p>\r\n            <h3> What\'s possible with the Webex Teams APIs? <a name=\"what-is-possible-with-spark-apis\" class=\"anchor\"></a></h3>\r\n            <p>The Webex Team APIs give your applications direct access to the Cisco Webex platform, giving you the ability to:</p>\r\n            <ul><li><a href=\"https://developer.webex.com/endpoint-rooms-post.html\">Create a room</a> and <a href=\"https://developer.webex.com/endpoint-memberships-post.html\">invite people</a></li><li><a href=\"https://developer.webex.com/endpoint-people-get.html\">Search for people</a> in your company</li><li><a href=\"https://developer.webex.com/endpoint-messages-post.html\">Post messages</a> into a room</li><li><a href=\"https://developer.webex.com/endpoint-messages-get.html\">Get room history</a> or be <a href=\"https://developer.webex.com/endpoint-webhooks-post.html\">notified in real-time</a> when new messages are posted by others</li></ul>\r\n            <p class=\"show-logged-in\" style=\"display: block;\">But enough talk! Since you\'re logged in we can just show you. Click on the Run button bellow to see the APIs in action:</p>',NULL,NULL,'superadmin'),(47,'Webex Teams - Quick Reference','Adam Kong','Reports','2018-06-21 15:37:07','Webex Teams QuickStart',1,'	\r\n		<p class=\"page-description\">Use this page to explore the APIs or \r\nbookmark it to quickly jump to a specific endpoint while developing your\r\n app. All APIs require <code>https</code> / TLS. You\'ll also notice the <code>v1</code>\r\n in each endpoint URL. This indicates that the latest API is currently \r\nversion 1.0. If we ever have to break backwards compatibility the \r\nversion number will be bumped.</p>\r\n            <h2 class=\"title-table\"> People <a name=\"people\" class=\"anchor\"></a></h2>\r\n            <p>People are registered users of Webex Teams. Searching and viewing People requires an auth token with a scope of <code>spark:people_read</code>. Viewing the list of all People in your Organization requires an administrator auth token with <code>spark-admin:people_read</code> scope. Adding, updating, and removing People requires an administrator auth token with the <code>spark-admin:people_write</code> scope.</p>\r\n<p>To learn more about managing people in a room see the <a href=\"https://developer.webex.com/resource-memberships.html\">Memberships API</a>. For information about how to allocate Hybrid Services licenses to people, see the <a href=\"https://developer.webex.com/docs/api/guides/admin-hybrid-services.html\">Managing Hybrid Services</a> guide.</p>',NULL,NULL,'superadmin'),(48,'test Upcoming Bot Username Changes','test - Niall Murphy','Cisco Spark','2018-06-21 17:29:25','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(49,'test Upcoming Bot Username Changes','test - Niall Murphy','Cisco Spark','2018-06-21 18:01:30','Bot,Username,Changes',1,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(52,'New Webex Teams - Upcoming Bot Username Changes','Adam Kong','Hot Article','2018-06-21 22:24:12','Webex Teams',0,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(53,'Upcoming Bot Username Changes','Niall Murphy','Hot Article','2018-06-21 22:27:19','Bot,Username,Changes',0,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(54,'test Upcoming Bot Username Changes','Niall Murphy','Hot Article','2018-06-21 22:35:22','Bot,Username,Changes',0,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(55,'Adam Upcoming Bot Username Changes','Adam Kong','Cisco Spark','2018-06-21 22:36:25','Bot,Username,Changes',0,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(56,'Webex Teams - Pagination','Adam Kong','Hot Article','2018-06-21 22:52:09','Bot,Username,Changes',0,'	\r\n		<p>As adoption of Webex Teams continues to skyrocket, so does the amount\r\n of content being shared by team members. We\'ve addressed this in the \r\nWebex Teams APIs by introducing support for pagination.</p>\r\n            <p>It would be impractical to return all messages in a busy \r\nroom, for example. With pagination, the Webex Teams API returns a \r\nspecific number of items at a time; allowing your app to request another\r\n page as needed.</p>\r\n            <h2> Navigating Pages <a name=\"navigating-pages\" class=\"anchor\"></a></h2>\r\n            <p>The Webex Teams APIs implement the <a href=\"http://tools.ietf.org/html/rfc5988\">RFC5988 (Web Linking)</a> standard for pagination. When requesting a list of resources the response may contain a <code class=\"light\">Link</code> header containing the URLs to the first, next, and previous page.</p>\r\n            <p>For example, requesting <code class=\"light\">GET /people?displayName=Harold</code> may return a link header like this one:</p>\r\n            <p>\r\n              </p><pre class=\"dark\"><code class=\"lang-http hljs\"><span class=\"hljs-attribute\">Link</span>: &lt;https://api.ciscospark.com/v1/people?displayName=Harold&amp;max=10&amp;before&amp;after=Y2lzY29zcGFyazovL3VzL1BFT1BMRS83MTZlOWQxYy1jYTQ0LTRmZWQtOGZjYS05ZGY0YjRmNDE3ZjU&gt; rel=\"next\"</code></pre>\r\n            \r\n            <p>Notice the <code class=\"light\">rel=\"next\"</code> at the end of the line. This tells your app that another page is available and provides the URL to fetch it.</p>\r\n            <p>The list of possible relationship types are:</p>\r\n            <table class=\"table\">\r\n              <tbody><tr>\r\n                <td><code class=\"light\">next</code></td>\r\n                <td style=\"width:100%\">Link to the next page</td>\r\n              </tr>\r\n              <tr>\r\n                <td><code class=\"light\">first</code></td>\r\n                <td>Link back to the first page</td>\r\n              </tr>\r\n              <tr>\r\n                <td><code class=\"light\">prev</code></td>\r\n                <td>Link to the previous page</td>\r\n              </tr>\r\n            </tbody></table>\r\n            <p>Please note that only the <code class=\"light\">rel=\"next\"</code>\r\n link header is guaranteed at this time. We may include other link \r\ntypes, that are defined in the RFC5988 (Web Linking) standard, in the \r\nfuture.</p>\r\n            <h2> Controlling Page Size <a name=\"controlling-page-size\" class=\"anchor\"></a></h2>\r\n            <p>When requesting a list of resources the <code class=\"light\">max</code> query parameter may be used to control the number of items returned per page. For example, requesting <code class=\"light\">GET /people?displayName=Harold&amp;max=2</code> tells the API to return only 2 items per page.</p>\r\n            <p>If the requested <code class=\"light\">max</code> query \r\nparameter value exceeds what a particular API endpoint allows, only the \r\nmaximum number of items allowed per page for that endpoint will be \r\nreturned. A <code class=\"light\">rel=\"next\"</code> link header will be present if another page of results is available.</p>',NULL,NULL,'superadmin'),(57,'Webex Teams - Message Attachments','Adam Kong','Hot Article','2018-06-21 23:05:00','Bot,Username,Changes',0,'	\r\n		<h1>Message Attachments</h1>\r\n            <p>Webex Teams has native support for posting messages with file attachments. Using the <a href=\"https://developer.webex.com/resource-messages.html\">Messages API</a>\r\n you can send messages containing text, text with attachments, or just \r\nshare a file with the room without any text. Message attachments sent \r\nand retrieved via the API are limited to 100MB each.</p>\r\n            <p>What you may not know is that Webex Teams has special \r\nsupport for most PDFs, Microsoft Word, Microsoft PowerPoint, and most \r\npopular image formats. For these file types, Webex Teams clients will \r\nrender a preview in the room and a full view when clicked.</p>\r\n            <p>You can share most types of files except for TIFF files. \r\nFor more information about message attachments in the Webex Teams \r\nclients, see <a href=\"https://collaborationhelp.cisco.com/article/en-us/yuwad5\" target=\"_blank\">Share Files with Others in Cisco Webex Teams</a>.</p>\r\n            <h2> Send a Message with Attachments <a name=\"send-a-message-with-attachments\" class=\"anchor\"></a></h2>\r\n            <h4> Local File Attachments <a name=\"local-file-attachments\" class=\"anchor\"></a></h4>\r\n            <p>To send local file attachments, simply post a message by including your access token in the <code class=\"light\">Authorization</code> header and the path to your local file with the <code class=\"light\">files</code> parameter. Optionally, you can also include a plain-text message with the attachment by using the <code class=\"light\">text</code> parameter. When uploading files directly from your local filesystem, your request will need to be a <code class=\"light\">multipart/form-data</code> request rather than JSON. Here\'s an example of using cURL to send a new message with a local file as a file attachment:</p>\r\n            <p>\r\n              </p><pre class=\"dark\"><code class=\"lang-shell hljs\">curl --request POST \\\r\n  --header \"Authorization: Bearer ACCESS_TOKEN\" \\\r\n  --form \"files=@/home/desktop/example.png;type=image/png\" \\\r\n  --form \"roomId=Y2lzY2.....\" \\\r\n  --form \"text=example attached\" \\\r\n  https://api.ciscospark.com/v1/messages\r\n</code></pre>\r\n            \r\n            <p>You can also use the your favorite scripting language to \r\nsend messages with local files. Here\'s an example of using Python 3 with\r\n a local file:</p>\r\n            <p>\r\n              </p><pre class=\"dark\"><code class=\"lang-python hljs\"><span class=\"hljs-keyword\">from</span> requests_toolbelt <span class=\"hljs-keyword\">import</span> MultipartEncoder\r\n<span class=\"hljs-keyword\">import</span> requests\r\n\r\nfilepath = <span class=\"hljs-string\">\'/path/to/file/filename.png\'</span>\r\nfiletype = <span class=\"hljs-string\">\'image/png\'</span>\r\nroomId = <span class=\"hljs-string\">\'ROOM_ID\'</span>\r\ntoken = <span class=\"hljs-string\">\'AUTH_TOKEN\'</span>\r\nurl = <span class=\"hljs-string\">\'https://api.ciscospark.com/v1/messages\'</span>\r\n\r\nmy_fields = {<span class=\"hljs-string\">\'roomId\'</span>: roomId,\r\n            <span class=\"hljs-string\">\'text\'</span>: <span class=\"hljs-string\">\'Hello World\'</span>,\r\n            <span class=\"hljs-string\">\'files\'</span>: (<span class=\"hljs-string\">\'file.png\'</span>, open(filepath, <span class=\"hljs-string\">\'rb\'</span>), filetype)}\r\nm = MultipartEncoder(fields=my_fields)\r\nr = requests.post(url, data=m,\r\n                  headers={<span class=\"hljs-string\">\'Content-Type\'</span>: m.content_type,\r\n                          <span class=\"hljs-string\">\'Authorization\'</span>: <span class=\"hljs-string\">\'Bearer \'</span> + token})\r\n\r\nprint(<span class=\"hljs-string\">\'Response: \'</span> + str(r.json()))\r\nprint(<span class=\"hljs-string\">\'Tracking ID: \'</span> + str(r.headers[<span class=\"hljs-string\">\'trackingId\'</span>]))\r\n</code></pre>\r\n            \r\n            <h4> Remote Attachments <a name=\"remote-attachments\" class=\"anchor\"></a></h4>\r\n            <p>Alternatively, if you have a file available via a \r\npublicly-accessible URL that you wish to share, you can use the URL as \r\nthe value in the <code class=\"light\">files</code> JSON parameter instead of attaching your local file in a multipart message. The <code class=\"light\">files</code> parameter currently takes one URL as an input. A plain-text message can also be included in the <code class=\"light\">text</code> parameter. Here\'s an example of using cURL to send a new message with a remote file as a file attachment:</p>\r\n            <p>\r\n              </p><pre class=\"dark\"><code class=\"lang-shell hljs\">curl --request POST \\\r\n  --header \"Authorization: Bearer ACCESS_TOKEN\" \\\r\n  --header \"Content-Type: application/json\" \\\r\n  --data \'{\"roomId\":\"Y2lzY2.....\",\"text\":\"Example file\",\"files\":[\"http://www.example.com/images/media.png\"]}\' \\\r\n  https://api.ciscospark.com/v1/messages\r\n</code></pre>\r\n            \r\n            <h2> Retrieve Message Attachments <a name=\"retrieve-message-attachments\" class=\"anchor\"></a></h2>\r\n            <h4> Retrieving Message Details <a name=\"retrieving-message-details\" class=\"anchor\"></a></h4>\r\n            <p>In order to retrieve the file details such as <code class=\"light\">filename</code> and <code class=\"light\">content-type</code>, you can simply use a HEAD request with your access token in the <code class=\"light\">Authorization</code> header. This is particularly useful if you just want to verify the filename and type before downloading the content.</p>\r\n            <p>\r\n              </p><pre class=\"dark\"><code class=\"lang-shell hljs\">curl -I https://api.ciscospark.com/v1/contents/Y2lzY...... -H \"Authorization: Bearer ACCESS_TOKEN\"\r\n\r\nHTTP/1.1 200 OK\r\nCache-Control: no-cache\r\nContent-Disposition: attachment; filename=\"example.png\"\r\nContent-Length: 44752\r\nContent-Type: image/png\r\n\r\n</code></pre>\r\n            \r\n            <h4> Retrieving Message Attachments <a name=\"retrieving-message-attachments\" class=\"anchor\"></a></h4>\r\n            <p>Files attached to a message are returned in the <code class=\"light\">files</code> property of the <a href=\"https://developer.webex.com/resource-messages.html\">message</a> object. To retrieve one of these files you should issue a <code class=\"light\">GET</code> request on the file URL including your Access Token in the <code class=\"light\">Authorization</code> header.</p>\r\n            <p>\r\n              </p><pre class=\"dark\"><code class=\"lang-shell hljs\">curl -H \"Authorization: Bearer ACCESS_TOKEN\" https://api.ciscospark.com/v1/contents/Y2lzY......</code></pre>',NULL,NULL,'superadmin'),(58,'Webex Teams - Formatting Messages','Niall Murphy','Cisco Spark','2018-06-21 23:09:29','Bot,Username,Changes',1,'	\r\n		<h1>Formatting Messages</h1>\r\n            <p>Webex Teams clients, across all platforms, can send and receive a limited form of rich text formatted using the <a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">Markdown markup language</a>. Bots and integrations can also send rich text messages formatted with Markdown, by using the <a href=\"https://developer.webex.com/resource-messages.html\">Messages API</a>.</p>\r\n            <p>Sending formatted text is super easy using the <code class=\"light\">markdown</code> parameter in the <a href=\"https://developer.webex.com/resource-messages.html\">Messages API</a>,\r\n though only a limited set of Markdown is supported at this time. See \r\nbelow for examples of the formatting supported in the Webex Teams \r\nclients.</p>\r\n            <p>But, before we dive into the examples below, there\'s an important note we need to mention about line breaks: The examples below <em>do not</em> include any JSON newline characters (<code class=\"light\">\\n</code>)\r\n to create line breaks in Webex Teams messagesâ??we\'ve left them out to \r\nfocus on just the specific Markdown example. To include line breaks in \r\nyour JSON message body, use standard Markdown <a href=\"https://daringfireball.net/projects/markdown/syntax#p\" target=\"_blank\">paragraphs and line breaks</a> with JSON newline characters. For example, to create distinct paragraphs, use two newline characters between the paragraphs:</p>\r\n            <div class=\"sample\">\r\n              <pre class=\"light-text formatting\">Paragraph 1\\n\\nParagraph 2\r\n</pre>\r\n            </div>\r\n            <p>Or, for a single break between lines, end the line with two spaces followed by a single newline character:</p>\r\n            <div class=\"sample\">\r\n              <pre class=\"light-text formatting\">Line 1  \\nLine 2\r\n</pre>\r\n            </div>\r\n            \r\n            <h3> Bold <a name=\"bold\" class=\"anchor\"></a></h3>\r\n            <div class=\"sample\">\r\n              <pre class=\"light-text formatting runnable\">**Title:** Add support for multiple file uploads\r\n\r\n**Status:** Closed\r\n</pre><div class=\"sample-holder\"><a href=\"https://developer.webex.com/formatting-messages.html#\">Run this example</a></div>\r\n            </div>\r\n            <h3> Italic <a name=\"italic\" class=\"anchor\"></a></h3>\r\n            <div class=\"sample\">\r\n              <pre class=\"light-text formatting runnable\">This is *the best* launch we\'ve had so far!\r\n</pre><div class=\"sample-holder\"><a href=\"https://developer.webex.com/formatting-messages.html#\">Run this example</a></div>\r\n            </div>\r\n            <h3> Links <a name=\"links\" class=\"anchor\"></a></h3>\r\n            <div class=\"sample\">\r\n              <pre class=\"light-text formatting runnable\">Should we try the sushi place for lunch?\r\n- [Oh yea!](http://example.com/polls/yd242?response=yes)\r\n- [Ewww Sushi](http://example.com/polls/yd242?response=no)\r\n- [Not today](http://example.com/polls/yd242?response=later)\r\n</pre><div class=\"sample-holder\"><a href=\"https://developer.webex.com/formatting-messages.html#\">Run this example</a></div>\r\n            </div>\r\n            <h3> Ordered Lists <a name=\"ordered-lists\" class=\"anchor\"></a></h3>\r\n            <div class=\"sample\">\r\n              <pre class=\"light-text formatting runnable\">Priorities for the week are:\r\n1. Collect Underpants\r\n2. ???\r\n3. Profit\r\n</pre><div class=\"sample-holder\"><a href=\"https://developer.webex.com/formatting-messages.html#\">Run this example</a></div>\r\n            </div>\r\n            <h3> Unordered Lists <a name=\"unordered-lists\" class=\"anchor\"></a></h3>\r\n            <div class=\"sample\">\r\n              <pre class=\"light-text formatting runnable\">Good morning Joe Fu. Here\'s your todo list:\r\n- Review that really important thing.\r\n- Meet Jason for lunch.\r\n- Buy a new shirt. The one you\'re wearing is terrible.\r\n</pre><div class=\"sample-holder\"><a href=\"https://developer.webex.com/formatting-messages.html#\">Run this example</a></div>\r\n            </div>\r\n            <h3> Block Quotes <a name=\"block-quotes\" class=\"anchor\"></a></h3>\r\n            <div class=\"sample\">\r\n              <pre class=\"light-text formatting runnable\">Alice, last week you said:\r\n&gt; I don\'t care what is costs. Let\'s book The Chainsmokers to headline Cisco Live.\r\n\r\nChristine from finance laughed and is now questioning our sanity.\r\n</pre><div class=\"sample-holder\"><a href=\"https://developer.webex.com/formatting-messages.html#\">Run this example</a></div>\r\n            </div>\r\n            <h3> In-Line Code <a name=\"in-line-code\" class=\"anchor\"></a></h3>\r\n            <div class=\"sample\">\r\n              <pre class=\"light-text formatting runnable\">Mike, I think the issue is with the `hasPermission` function\r\n</pre><div class=\"sample-holder\"><a href=\"https://developer.webex.com/formatting-messages.html#\">Run this example</a></div>\r\n            </div>\r\n            <h3> Fenced Code Blocks <a name=\"fenced-code-blocks\" class=\"anchor\"></a></h3>\r\n            <div class=\"sample\">\r\n              <pre class=\"light-text formatting runnable\">Hello world in golang\r\n```\r\npackage main\r\n\r\nimport \"fmt\"\r\n\r\nfunc main() {\r\n	fmt.Println(\"Hello, ä¸?ç??\")\r\n}\r\n```\r\n</pre><div class=\"sample-holder\"><a href=\"https://developer.webex.com/formatting-messages.html#\">Run this example</a></div>\r\n            </div>\r\n            <h2> Mentions <a name=\"mentions\" class=\"anchor\"></a></h2>\r\n            <p>Just like in the Webex Teams clients, <a href=\"https://collaborationhelp.cisco.com/article/en-us/p5k20o\" target=\"_blank\">@mentions</a>\r\n can be used in messages to get someone\'s attention in a group room. To \r\n@mention someone, use one of the following methods to specify the person:</p>\r\n            <h3> Mention by Email <a name=\"mention-by-email\" class=\"anchor\"></a></h3>\r\n            <div class=\"sample\">\r\n              <pre class=\"light-text formatting\">Hi &lt;@personEmail:banderson@example.com|Bobby&gt;, your order has been processed.\r\n</pre>\r\n            </div>\r\n            <h3> Mention by Person ID <a name=\"mention-by-person-id\" class=\"anchor\"></a></h3>\r\n            \r\n              <pre class=\"light-text formatting\">We should get &lt;@personId:Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mNWIzNjE4Ny1jOGRkLTQ3MjctOGIyZi1mOWM0NDdmMjkwNDY|Jose&gt; to look at that right a</pre>',NULL,NULL,'superadmin'),(59,'Webex Teams - Webhooks Explained','Adam Kong','Hot Article','2018-06-21 23:11:28','Bot,Username,Changes',0,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.<br><br>There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.<br><br>When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.<br><br>Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from mybot@sparkbot.io to mybot@webex.bot. Your code might be checking the personEmail field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the personId of the sender against your bot\'s personId. While a bot\'s address can change, the personId cannot, so your code will survive any future domain or username changes.<br><br>We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own mybot@sparkbot.io then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<br><br>If you have any questions about this change, our Webex Developer Support Team is available 24/7 to help. Please contact them with your concern.',NULL,NULL,'superadmin'),(60,'test - Rate Limiting with Spark API','Taylor','Hot Article','2018-06-22 15:28:39','Bot,Username,Changes',0,'	\r\n		<p>To protect the Spark environment, the API has rate limits in place \r\nfor the different resources available for use, such as /messages and \r\n/rooms.&nbsp; These limits will vary depending on the calls being made, how \r\nresource intensive that call is on the servers, and how many servers are\r\n actively in routing â?? and is subject to change as needed to protect all\r\n use cases from failing in the event of a large batch of requests.&nbsp; So, \r\nwhat should be done if you want to make API calls very frequently, but \r\ndonâ??t want to hit errors and lose requests by going over the rate \r\nlimit?&nbsp; The answer is to use the Retry-After Header that is returned \r\nwith an HTTP 429 error.&nbsp; The Retry-After header defines the number of \r\nseconds youâ??ll need to wait before sending API requests again. </p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>The\r\n app that follows pulls the list of rooms available to the user (using a\r\n single user or botâ??s bearer token), as fast as possible.&nbsp; Normally, it \r\nwould be recommended to put some kind of wait time between continuous \r\nlooping requests, to avoid hitting the rate limit entirely.&nbsp; However, \r\nsince that rate limit might be reached anyway depending on the resource \r\navailability, itâ??s important to handle for the likely possibility youâ??ll\r\n catch a 429 here and there.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>Basically, we make a call to <a class=\"jive-link-external-small\" href=\"https://api.ciscospark.com/v1/rooms\" rel=\"nofollow\" target=\"_blank\">https://api.ciscospark.com/v1/rooms</a>\r\n continuously and look for an error.&nbsp; If the error is a status code 429,\r\n we check the wait time relayed to us in the Retry-After header and \r\nsleep for the time specified before starting again.&nbsp; If thereâ??s an \r\nerror, but it isnâ??t a 429, we break out of the loop because something \r\nelse is wrong.&nbsp; Maybe you had a bad bearer token, or maybe there is a \r\ngeneral error with the format of the request.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>Since\r\n this code can run forever if implemented properly, youâ??ll need to \r\nCtrl+C to kill it in the Terminal itself â?? make sure you donâ??t let it go\r\n on indefinitely or you could be flagged depending on how many requests \r\nare made and for how long. The initial portion of the application is \r\nmaking the call to the rooms resource to get the rooms over and over, \r\nwhereas the latter section beginning with the line:</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"text-indent: .5in;\"><span style=\"font-size: 10pt;\"><span style=\"font-family: Courier; color: blue;\">except</span><span style=\"font-family: Courier; color: black;\"> urllib2.HTTPError </span><span style=\"font-family: Courier; color: blue;\">as</span><span style=\"font-family: Courier; color: black;\"> e: </span></span></p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>defines\r\n what to do if a 429 error is encountered â?? print out the content of the\r\n error, and then extract the value of the Retry-After header for use in \r\nthe sleep. Hereâ??s the full app (itâ??s short so weâ??ll put the whole \r\nthing):</p><pre class=\"plain\" name=\"code\">import urllib2\r\nimport json\r\nimport time\r\n\r\ndef sendSparkGET(url):\r\n&nbsp;&nbsp;&nbsp; request = urllib2.Request(url,\r\n headers={\"Accept\" : \"application/json\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Content-Type\":\"application/json\"})\r\n request.add_header(\"Authorization\", \"Bearer \"+bearer)\r\n&nbsp;&nbsp;&nbsp; response = urllib2.urlopen(request)\r\n&nbsp;&nbsp;&nbsp; return response\r\n\r\nbearer = \"BEARER_TOKEN_HERE\"\r\n\r\nwhile True:\r\n&nbsp;&nbsp;&nbsp; try:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result = sendSparkGET(\'https://api.ciscospark.com/v1/rooms\')\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print result.code, time.time(), result.headers[\'Trackingid\']\r\n&nbsp;&nbsp;&nbsp; except urllib2.HTTPError as e:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if e.code == 429:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print \'code\', e.code\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print \'headers\', e.headers\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print \'Sleeping for\', e.headers[\'Retry-After\'], \'seconds\'\r\n sleep_time = int(e.headers[\'Retry-After\'])\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while sleep_time &gt; 10:\r\n time.sleep(10)\r\n sleep_time -= 10\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print \'Asleep for\', sleep_time, \'more seconds\'\r\n time.sleep(sleep_time)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print e, e.code\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break\r\n\r\n\r\n\r\n</pre><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>Itâ??s important \r\nto note that itâ??s possible to send a request after receiving a 429 \r\nwithout getting an error; there are many servers involved with handling a\r\n request, so just because youâ??ve hit the rate limit of one, does not \r\nmean youâ??ve hit the rate limit of all.&nbsp; However, youâ??re probably pretty \r\nclose to failing on every server, so itâ??s best to wait for the time \r\ndescribed by Retry-After upon detecting the very first 429.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>The full code can be found on our <a class=\"jive-link-external-small\" href=\"https://github.com/ciscospark/SparkRetryAfterDemo\" rel=\"nofollow\" target=\"_blank\">Github</a>.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p><span>As always, if you have any questions, please contact </span><a class=\"jive-link-email-small\" href=\"mailto:devsupport@ciscospark.com\">devsupport@ciscospark.com</a><span> 24/7/365 - weâ??re happy to help!</span></p>',NULL,NULL,'superadmin'),(61,'Webex Teams - Webhooks Explained','Adam Kong','Hot Article','2018-06-25 22:52:20','Bot,Username,Changes',0,'	\r\n		Following the rebranding of Cisco Spark to Cisco Webex Teams, all newly \r\ncreated bots will now be given a domain of webex.bot. Existing bots, \r\nwhich use the sparkbot.io domain, will remain unchanged until August 31,\r\n 2018. However if you, as a bot developer, would like to update the \r\ndomain to webex.bot before then, you now have that option when you \r\nselect a bot on the My Webex Teams Apps page.<br><br>There are a few \r\nthings that you will want to consider when deciding when to update your \r\nbot\'s domain. Remember, the bot\'s address (username and domain) is the \r\nidentifier that you give to your customers so that they can open a&nbsp; \r\n1-to-1 space with your bot or add it to a group space. When you change \r\nthe domain, you will need to update all of the places where you \r\nexternally advertise the bot\'s address.<br><br>When the address changes,\r\n all existing space memberships remain unchanged; the bot is still a \r\nmember of any spaces previous to the domain change. In this respect, it \r\nis like changing the bot\'s avatar. Similar to avatar changes, the Webex \r\nTeams clients may not reflect the address change for several days. This \r\nwill not prevent your users from communicating with the bot. New users \r\nwill only ever see the new address and will not be aware that there ever\r\n was an address with @sparkbot.io.<br><br>Before changing the domain, \r\nyou will want to ensure that your bot will behave correctly with the new\r\n name. One useful precaution is to search your codebase for the string \r\n\'sparkbot.io\'. If it appears anywhere in your code then that code is \r\ngoing to misbehave when the address of your bot changes from \r\nmybot@sparkbot.io to mybot@webex.bot. Your code might be checking the \r\npersonEmail field of the message sender to see if it is from your own \r\nbot. This is useful if you want to avoid replying to your own messages. \r\nOne way to fix this is to change the code to use the new address: \r\nmybot@webex.bot. However, a better fix is to stop using the bot\'s \r\naddress completely. Instead, check the personId of the sender against \r\nyour bot\'s personId. While a bot\'s address can change, the personId \r\ncannot, so your code will survive any future domain or username changes.<br><br>We\r\n will support bots with @sparkbot.io addresses until August 31, 2018. \r\nAfter that time, all bots will be migrated to the webex.bot domain. All \r\nnew bots created on the Webex for Developers portal will use the new \r\n@webex.bot domain. If you try to create a new bot with a matching \r\nusername, it will be refused. For example, if you own mybot@sparkbot.io \r\nthen it will not be possible for anyone to create a bot with the address\r\n mybot@webex.bot.',NULL,NULL,'superadmin'),(62,'Using a Webhook Secret','Adam Kong','Hot Article','2018-06-26 10:47:18','Bot,Username,Changes',0,'	 		<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">The recently released advanced webhooks include the ability to define a â??secretâ?? in your webhook, which will pass along with your webhook as a header called â??X-Spark-Signatureâ??. This can be used to validate a request is coming from the Spark API and not from some other origin â?? more info can be found at the bottom of ths.<span class=\"Apple-converted-space\"> </span><span class=\"Apple-converted-space\"></span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">In this blog, weâ??ll walk you through using the secret field, so you can start locking down your webhooks ASAP.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">First, youâ??ll need to create a<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://developer.ciscospark.com/endpoint-webhooks-post.html\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">webhook</a>.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Note the â??secretâ?? field in the list of options; to make it easy, weâ??ll use the passphrase listed in the example and set it to:</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; padding-left: 30px;\"><span style=\"box-sizing: border-box; font-family: &quot;courier new&quot;, courier;\">somesupersecretphrase</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Next youâ??ll need to code up some logic that checks the secret when the webhookâ??s data is received. The following script shows very simple validation â?? just prints out a true if the secret matches. Hereâ??s the Python code:</p><pre class=\"python\" name=\"code\" style=\"box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro Semibold&quot;; font-size: 0.875rem; display: block; padding: 0.5em 1em; margin: 0px 0px 1em; line-height: 1.25rem; word-break: break-all; word-wrap: normal; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 0.375em; border-top-right-radius: 0.375em; border-bottom-right-radius: 0.375em; border-bottom-left-radius: 0.375em; height: auto; tab-size: 2; caret-color: rgb(51, 51, 51); font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">from itty import *\r\nimport hashlib\r\nimport hmac\r\n\r\n@post(\'/\')\r\ndef index(request):\r\n&nbsp;&nbsp;&nbsp; \"\"\"\r\n&nbsp;&nbsp;&nbsp; When messages come in from the webhook, they are processed here.\r\n&nbsp;&nbsp;&nbsp; X-Spark-Signature - The header containing the sha1 hash we need to validate\r\n&nbsp;&nbsp;&nbsp; request.body - the Raw JSON String we need to use to validate the X-Spark-Signature\r\n&nbsp;&nbsp;&nbsp; \"\"\"\r\n\r\n&nbsp;&nbsp;&nbsp; raw = request.body\r\n&nbsp;&nbsp;&nbsp; #Let\'s create the SHA1 signature \r\n&nbsp;&nbsp;&nbsp; #based on the request body JSON (raw) and our passphrase (key)\r\n&nbsp;&nbsp;&nbsp; hashed = hmac.new(key, raw, hashlib.sha1)\r\n&nbsp;&nbsp;&nbsp; validatedSignature = hashed.hexdigest()\r\n\r\n&nbsp;&nbsp;&nbsp; print \'validatedSignature\', validatedSignature\r\n&nbsp;&nbsp;&nbsp; print \'X-Spark-Signature\', request.headers.get(\'X-Spark-Signature\')\r\n&nbsp;&nbsp;&nbsp; print \'Equal?\', validatedSignature == request.headers.get(\'X-Spark-Signature\')\r\n\r\n&nbsp;&nbsp;&nbsp; return \"true\"\r\n\r\n#Replace this with the secret phrase you used in the webhook creation\r\nkey = \"somesupersecretphrase\"\r\nport = 10007\r\nrun_itty(server=\'wsgiref\', host=\'0.0.0.0\', port=port)\r\n\r\n\r\n\r\n\r\n</pre><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><span style=\"box-sizing: border-box; font-size: 10pt; line-height: 1.5em;\"><br style=\"box-sizing: border-box;\"></span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Which can also be grabbed from<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/ciscospark/SparkSecretValidationDemo/blob/master/verifysecret_simple.py\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Github</a>.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Note the â??keyâ?? field is the secret defined earlier when the webhook was created, which if it matches whatâ??s sent in the webhook, will print â??Trueâ??.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">This app alone wonâ??t do much â?? all itâ??s going to do is confirm â??Yep, thatâ??s the right secret!â?? and then end. But if we combo it with our recent Bot example (<a class=\"jive-link-external-small\" href=\"https://developer.ciscospark.com/blog/blog-details-8110.html\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Spark bot demo blog</a><span class=\"Apple-converted-space\">&nbsp;</span>|<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/ciscospark/SparkBotDemo\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Github repo</a>) then we can validate the secret and use it in an if / else statement. If the secret matches, keep going, if it does not, end immediately. The complete code combining the above validation script and the bot script can be found on<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/ciscospark/SparkSecretValidationDemo/blob/master/verifysecret_full_demo.py\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Github</a><span class=\"Apple-converted-space\">&nbsp;</span>as well.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">From that app, hereâ??s a snippet showing the relevant logic using validation:</p><pre class=\"python\" name=\"code\" style=\"box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro Semibold&quot;; font-size: 0.875rem; display: block; padding: 0.5em 1em; margin: 0px 0px 1em; line-height: 1.25rem; word-break: break-all; word-wrap: normal; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 0.375em; border-top-right-radius: 0.375em; border-bottom-right-radius: 0.375em; border-bottom-left-radius: 0.375em; height: auto; tab-size: 2; caret-color: rgb(51, 51, 51); font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">&nbsp;&nbsp;&nbsp; raw = request.body\r\n&nbsp;&nbsp;&nbsp; #Let\'s create the SHA1 signature \r\n&nbsp;&nbsp;&nbsp; #based on the request body JSON (raw) and our passphrase (key)\r\n&nbsp;&nbsp;&nbsp; hashed = hmac.new(key, raw, hashlib.sha1)\r\n&nbsp;&nbsp;&nbsp; validatedSignature = hashed.hexdigest()\r\n\r\n&nbsp;&nbsp;&nbsp; print \'validatedSignature\', validatedSignature\r\n&nbsp;&nbsp;&nbsp; print \'X-Spark-Signature\', request.headers.get(\'X-Spark-Signature\')\r\n\r\n&nbsp;&nbsp;&nbsp; if validatedSignature == request.headers.get(\'X-Spark-Signature\'):\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; â?¦RUN THE APPâ?¦\r\n\r\n&nbsp;&nbsp;&nbsp; else:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print \"Secret does not match, verboten!\"\r\n\r\n\r\n</pre><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">You can expand on all of the logic extensively, but for the basic use of a secret in a functional bot app, this covers what you need to know. If you have any questions, please contact<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-email-small\" href=\"mailto:devsupport@ciscospark.com\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">devsupport@ciscospark.com</a><span class=\"Apple-converted-space\">&nbsp;</span>24/7/365 and weâ??ll be happy to help!</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Taylor Hanson, Customer Support Engineer II</p>',NULL,NULL,'superadmin'),(63,'IRC to Spark and Back Again','Adam Kong','Hot Article','2018-06-26 15:20:56','IRC,Spark',0,'	\r\n		<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">With the recent release of bot functionality for Cisco Sparkâ??s API, weâ??ve explored methods to integrate Spark rooms with older legacy technology, to bring them into the next generation. With this in mind, we built a Spark bot application that transmits messaging and state information between Cisco Spark and an IRC channel â?? effectively linking one of the original bot platforms to one of the most recent.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">The first major step to building any multi-function application is to set a roadmap for the applicationâ??s functionality. The application that we are developing will:</p><ul style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; caret-color: rgb(51, 51, 51); color: rgb(51, 51, 51); font-family: &quot;Cisco Sans Extra Light&quot;, sans-serif; font-size: 16px; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\"><span style=\"box-sizing: border-box;\">Receive a Webhook from<span class=\"Apple-converted-space\">&nbsp;</span></span><a class=\"jive-link-external-small\" href=\"https://api.ciscospark.com/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">https://api.ciscospark.com/</a><span style=\"box-sizing: border-box;\"></span></li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\"><span style=\"box-sizing: border-box;\">Send RESTful requests to<span class=\"Apple-converted-space\">&nbsp;</span></span><a class=\"jive-link-external-small\" href=\"https://api.ciscospark.com/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">https://api.ciscospark.com/</a><span style=\"box-sizing: border-box;\"></span></li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">Send and receive messages from an IRC channel</li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">Interpret text sent and received by both endpoints</li></ul><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Now that we have a basic idea of what our application needs, letâ??s locate some resources that will help us accomplish our end goal. NodeJS has a default webserver library, http, that fulfills the needs for our receiving portion perfectly, but we will need to install two additional libraries for NodeJS. One handles IRC, and the other handles sending RESTful requests. To install on OSX or Linux, use<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://docs.npmjs.com/cli/install\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">npm</a>:</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; padding-left: 30px;\"><span style=\"box-sizing: border-box; font-size: 10pt; font-family: &quot;courier new&quot;, courier;\">npm install irc<span class=\"Apple-converted-space\">&nbsp;</span></span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; padding-left: 30px;\"><span style=\"box-sizing: border-box; font-size: 10pt; font-family: &quot;courier new&quot;, courier;\">npm install request</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Since we now have these two libraries installed, letâ??s generate a script file that includes the libraries weâ??ll be using:</p><pre class=\"plain\" name=\"code\" style=\"box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro Semibold&quot;; font-size: 0.875rem; display: block; padding: 0.5em 1em; margin: 0px 0px 1em; line-height: 1.25rem; word-break: break-all; word-wrap: normal; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 0.375em; border-top-right-radius: 0.375em; border-bottom-right-radius: 0.375em; border-bottom-left-radius: 0.375em; height: auto; tab-size: 2; caret-color: rgb(51, 51, 51); font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">// External libraries\r\nvar request = require(\'request\');\r\nvar http = require(\'http\');\r\nvar irc = require(\'irc\');\r\n\r\n\r\n\r\n</pre><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">At this point, we are ready to start building our bot application. Since our application is based around events that occur in both Cisco Spark and a specific IRC channel, we will need to make event listeners for both. Letâ??s start by generating the IRC connection, and the event listeners associated with it:</p><pre class=\"plain\" name=\"code\" style=\"box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro Semibold&quot;; font-size: 0.875rem; display: block; padding: 0.5em 1em; margin: 0px 0px 1em; line-height: 1.25rem; word-break: break-all; word-wrap: normal; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 0.375em; border-top-right-radius: 0.375em; border-bottom-right-radius: 0.375em; border-bottom-left-radius: 0.375em; height: auto; tab-size: 2; caret-color: rgb(51, 51, 51); font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">var botName = \'IRCToSparkBot\'; // The name of your bot\r\nvar myChannel = \'#mychan\'; // The channel your bot is active on\r\n\r\nvar bot = new irc.Client(\'irc.freenode.net\', botName, { //Create Bot\r\n&nbsp;&nbsp;&nbsp; channels: [myChannel]\r\n});\r\n\r\n\r\nbot.addListener(\'message\' + myChannel, function (from, message) { // Add listener for channel\r\n\r\n});\r\n\r\n\r\nbot.addListener(\'pm\', function (from, message) { // Add listener for PM\r\n\r\n});\r\n\r\n\r\nbot.addListener(\'join\', function(channel, who) { // Add listener for user joins\r\n\r\n});\r\n\r\n\r\nbot.addListener(\'part\', function(channel, who, reason) { // Add listener for user parts\r\n\r\n});\r\n\r\n\r\n\r\n</pre><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Now that the framework for our IRC connection is set up, we can begin generating a way for it to communicate with our Spark Bot. Since Spark Bots communicate via REST calls, we will need to generate a function that handles sending these calls:</p><pre class=\"plain\" name=\"code\" style=\"box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro Semibold&quot;; font-size: 0.875rem; display: block; padding: 0.5em 1em; margin: 0px 0px 1em; line-height: 1.25rem; word-break: break-all; word-wrap: normal; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 0.375em; border-top-right-radius: 0.375em; border-bottom-right-radius: 0.375em; border-bottom-left-radius: 0.375em; height: auto; tab-size: 2; caret-color: rgb(51, 51, 51); font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">function sendRequest(myURL, myMethod, myHeaders, myData, callback) { // Sends RESTful requests\r\n\r\n&nbsp; var options = {\r\n&nbsp;&nbsp;&nbsp; url: myURL,\r\n&nbsp;&nbsp;&nbsp; method: myMethod,\r\n&nbsp;&nbsp;&nbsp; json: true,\r\n&nbsp;&nbsp;&nbsp; headers: myHeaders,\r\n&nbsp;&nbsp;&nbsp; body: myData\r\n&nbsp; };\r\n\r\n&nbsp; var res = \'\';\r\n\r\n&nbsp; request(options, function optionalCallback(error, response, body) {\r\n&nbsp;&nbsp;&nbsp; if (error) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res = \"Request Failed: \" + error;\r\n&nbsp;&nbsp;&nbsp; } else {\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res = body;\r\n&nbsp;&nbsp;&nbsp; }\r\n&nbsp;&nbsp;&nbsp; callback(res)\r\n&nbsp; });\r\n}\r\n\r\n\r\n\r\n</pre><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">You may notice that the function we created supports multiple methods, headers and URLs. We are building our request function this way so that it can be used universally throughout our application, if we ever decide to expand upon the systems itâ??s integrated with. Additionally, we also include a callback function; this will allow us to effectively receive and parse the information returned from our requests.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">With the request function built, we can begin collecting commonly used global variables that will be reused throughout our application:</p><ul style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; caret-color: rgb(51, 51, 51); color: rgb(51, 51, 51); font-family: &quot;Cisco Sans Extra Light&quot;, sans-serif; font-size: 16px; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">Spark Bot\'s Bearer Token</li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">Spark Bot\'s Target Room ID</li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">Spark\'s Required Headers</li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">Spark\'s Message URL for Sending and Receiving Messages</li></ul><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Weâ??ll define them globally in the application:</p><pre class=\"plain\" name=\"code\" style=\"box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro Semibold&quot;; font-size: 0.875rem; display: block; padding: 0.5em 1em; margin: 0px 0px 1em; line-height: 1.25rem; word-break: break-all; word-wrap: normal; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 0.375em; border-top-right-radius: 0.375em; border-bottom-right-radius: 0.375em; border-bottom-left-radius: 0.375em; height: auto; tab-size: 2; caret-color: rgb(51, 51, 51); font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">var myToken = \'\'; // user/bot bearer token\r\nvar myRoomID = \'\'; // Spark RoomId for bot\r\nvar sparkHeaders = {\'content-type\': \'application/json; charset=utf-8\', \'Authorization\':\'Bearer \' + myToken}; // Basic Cisco Spark Header\r\nvar messagesURL = \'https://api.ciscospark.com/v1/messages/\'; // Spark Messages API URL, do not modify\r\n\r\n\r\n\r\n</pre><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">With a few more additions to the IRC listeners, we can effectively receive information with our bot in IRC and send it into Cisco Spark. In the next code section, we add calls to our sendRequest from each of the listeners POSTing messages to the Spark room:</p><pre class=\"plain\" name=\"code\" style=\"box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro Semibold&quot;; font-size: 0.875rem; display: block; padding: 0.5em 1em; margin: 0px 0px 1em; line-height: 1.25rem; word-break: break-all; word-wrap: normal; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 0.375em; border-top-right-radius: 0.375em; border-bottom-right-radius: 0.375em; border-bottom-left-radius: 0.375em; height: auto; tab-size: 2; caret-color: rgb(51, 51, 51); font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">// External libraries\r\nvar request = require(\'request\');\r\nvar http = require(\'http\');\r\nvar irc = require(\'irc\');\r\n\r\nvar botName = {irc:\'IRCToSparkBot\', spark:\'IRCToSparkBot\', sparkEmail:\'IRCToSparkBot@sparkbot.io\'}; // The name of your bot\r\nvar myChannel = \'#mychan\'; // The channel your bot is active on\r\nvar myToken = \'\'; // user/bot bearer token\r\nvar myRoomID = \'\'; // Spark RoomId for bot\r\nvar sparkHeaders = {\'content-type\': \'application/json; charset=utf-8\', \'Authorization\':\'Bearer \' + myToken}; // Basic Cisco Spark Header\r\nvar messagesURL = \'https://api.ciscospark.com/v1/messages/\'; // Spark Messages API URL, do not modify\r\n\r\nfunction sendRequest(myURL, myMethod, myHeaders, myData, callback) { // Sends RESTful requests\r\n\r\n&nbsp; var options = {\r\n&nbsp;&nbsp;&nbsp; url: myURL,\r\n&nbsp;&nbsp;&nbsp; method: myMethod,\r\n&nbsp;&nbsp;&nbsp; json: true,\r\n&nbsp;&nbsp;&nbsp; headers: myHeaders,\r\n&nbsp;&nbsp;&nbsp; body: myData\r\n&nbsp; };\r\n\r\n&nbsp; var res = \'\';\r\n\r\n&nbsp; request(options, function optionalCallback(error, response, body) {\r\n&nbsp;&nbsp;&nbsp; if (error) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res = \"Request Failed: \" + error;\r\n&nbsp;&nbsp;&nbsp; } else {\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res = body;\r\n&nbsp;&nbsp;&nbsp; }\r\n&nbsp;&nbsp;&nbsp; callback(res)\r\n&nbsp; });\r\n}\r\n\r\nvar bot = new irc.Client(\'irc.freenode.net\', botName, { //Connect to IRC\r\n&nbsp;&nbsp;&nbsp; channels: [myChannel]\r\n});\r\n\r\n\r\nbot.addListener(\'message\' + myChannel, function (from, message) { // Add listener for channel\r\n\r\n&nbsp; sendRequest(messagesURL, \"POST\", sparkHeaders, { roomId: myRoomID, text: from + \': \' + message}, function(resp){});\r\n});\r\n\r\n\r\nbot.addListener(\'pm\', function (from, message) { // Add listener for PM\r\n\r\n&nbsp; sendRequest(messagesURL, \"POST\", sparkHeaders, { roomId: myRoomID, text: \'PM from \' + from + \': \' + message}, function(resp){});\r\n});\r\n\r\n\r\nbot.addListener(\'join\', function(channel, who) { // Add listener for user joins\r\n\r\n&nbsp; sendRequest(messagesURL, \"POST\", sparkHeaders, { roomId: myRoomID, text: who + \' has joined \' + channel + \' - \'}, function(resp){});\r\n});\r\n\r\n\r\nbot.addListener(\'part\', function(channel, who, reason) { // Add listener for user parts\r\n\r\n&nbsp; sendRequest(messagesURL, \"POST\", sparkHeaders, { roomId: myRoomID, text: who + \' has left \' + channel + \' - \'}, function(resp){});\r\n});\r\n\r\n\r\n\r\n</pre><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">The first half of our application is complete, so itâ??s time to start on the rest - sending messages received in Cisco Spark to the IRC channel where our bot resides. During this portion, we need to set up a listener (which will require us to declare a port), and parse the REST body received by our application. To do this, we will use the http library and create the listener, as well as a catch to handle all unsupported information:</p><pre class=\"plain\" name=\"code\" style=\"box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro Semibold&quot;; font-size: 0.875rem; display: block; padding: 0.5em 1em; margin: 0px 0px 1em; line-height: 1.25rem; word-break: break-all; word-wrap: normal; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 0.375em; border-top-right-radius: 0.375em; border-bottom-right-radius: 0.375em; border-bottom-left-radius: 0.375em; height: auto; tab-size: 2; caret-color: rgb(51, 51, 51); font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">var portNumber = 8080; // Set listen port number\r\n\r\n\r\nhttp.createServer(function (req, res) { // Set up web listener to receive Webhook POST / Relaying. AKA the magic.\r\n\r\n&nbsp; if (req.method == \'POST\') {\r\n\r\n&nbsp;&nbsp;&nbsp; req.on(\'data\', function(chunk) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var resObj = JSON.parse(chunk.toString());\r\n&nbsp;&nbsp; \r\n&nbsp;&nbsp;&nbsp; });\r\n\r\n&nbsp;&nbsp;&nbsp; req.on(\'end\', function() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.writeHead(200, \"OK\", {\'Content-Type\': \'text/html\'});\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.end();\r\n&nbsp;&nbsp;&nbsp; });\r\n\r\n&nbsp; } else {\r\n&nbsp;&nbsp;&nbsp; console.log(\"[405] \" + req.method + \" to \" + req.url);\r\n&nbsp;&nbsp;&nbsp; res.writeHead(405, \"Method not supported\", {\'Content-Type\': \'text/html\'});\r\n&nbsp;&nbsp;&nbsp; res.end(\'405 - Method not supported\');\r\n&nbsp; }\r\n}).listen(portNumber); // listen on tcp portNumber value (all interfaces)\r\n\r\n\r\n\r\n</pre><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Notice that we pass in the port number via a global variable when creating our http server. This will allow us to easily set up different instances of the same application as new processes at a later time. Be sure to define the port number for the http server to access globally.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Our application is ready to receive requests. Itâ??s time to generate the webhook that will translate Spark messages into requests sent to the IRC room. First, we must create a bot. To create a bot, go to this<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://developer.ciscospark.com/add-app.html\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">page</a><span class=\"Apple-converted-space\">&nbsp;</span>and select the button â??Create a Botâ??.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">On the page to follow, you are given the choice to name your bot, address it, and add an icon to its spark profile. Now that the bot has been created, we can collect the botâ??s bearer token, which will be used throughout our application as we develop it. Proceed to the bots page by going to the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://developer.ciscospark.com/apps.html\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">â??My Appsâ?? page</a>, selecting the bot and then clicking â??Regenerate Access Tokenâ??.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">With the botâ??s bearer token recorded, itâ??s time to create a webhook. To do this, we are going to send a POST request to<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://api.ciscospark.com/v1/webhooks\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 10pt; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px; line-height: 1.5em;\">https://api.ciscospark.com/v1/webhooks</a><span class=\"Apple-converted-space\">&nbsp;</span>with the following headers and body:</p><pre class=\"plain\" name=\"code\" style=\"box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro Semibold&quot;; font-size: 0.875rem; display: block; padding: 0.5em 1em; margin: 0px 0px 1em; line-height: 1.25rem; word-break: break-all; word-wrap: normal; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 0.375em; border-top-right-radius: 0.375em; border-bottom-right-radius: 0.375em; border-bottom-left-radius: 0.375em; height: auto; tab-size: 2; caret-color: rgb(51, 51, 51); font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \'content-type\': \'application/json; charset=utf-8\',\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \'Authorization\':\'Bearer MYTOKEN\'\r\n}\r\n\r\n{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"name\": \"IRCToSparkBot\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"targetUrl\": \"http://www.myboturl.com/\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"resource\": \"messages\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"event\": \"created\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"filter\": \"roomId=MYROOMID\"\r\n}\r\n\r\n\r\n\r\n</pre><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">With the webhook created using the botâ??s token, Spark will send a POST request to our defined target URL whenever the bot is explicitly mentioned in the designated room.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">We can now safely assign values to the myRoomID and myToken global variables in our application - they had placeholders earlier:</p><pre class=\"plain\" name=\"code\" style=\"box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro Semibold&quot;; font-size: 0.875rem; display: block; padding: 0.5em 1em; margin: 0px 0px 1em; line-height: 1.25rem; word-break: break-all; word-wrap: normal; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 0.375em; border-top-right-radius: 0.375em; border-bottom-right-radius: 0.375em; border-bottom-left-radius: 0.375em; height: auto; tab-size: 2; caret-color: rgb(51, 51, 51); font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">var myToken = \'\'; // user/bot bearer token\r\nvar myRoomID = \'\'; // Spark RoomId for bot\r\n\r\n\r\n\r\n</pre><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">These values should reflect the roomId and bearer token of the bot.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Now that our webhook is configured, we can begin interpreting the received JSON body. For security purposes, the JSON body sent by the webhook does not include the message text, it contains an encrypted ID. We need to set up logic within our http listener to collect the encrypted message ID from the received JSON and send an authenticated GET request to grab the message text from Spark using the bot Bearer Token:</p><pre class=\"plain\" name=\"code\" style=\"box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro Semibold&quot;; font-size: 0.875rem; display: block; padding: 0.5em 1em; margin: 0px 0px 1em; line-height: 1.25rem; word-break: break-all; word-wrap: normal; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 0.375em; border-top-right-radius: 0.375em; border-bottom-right-radius: 0.375em; border-bottom-left-radius: 0.375em; height: auto; tab-size: 2; caret-color: rgb(51, 51, 51); font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">\r\nhttp.createServer(function (req, res) { // Set up web listener to receive Webhook POST / Relaying. AKA the magic.\r\n\r\n&nbsp; if (req.method == \'POST\') {\r\n\r\n&nbsp;&nbsp;&nbsp; req.on(\'data\', function(chunk) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var resObj = JSON.parse(chunk.toString());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sendRequest(messagesURL + resObj.data.id, \"GET\", sparkHeaders, \'\', function(resp){});\r\n&nbsp;&nbsp; \r\n&nbsp;&nbsp;&nbsp; });\r\n\r\n&nbsp;&nbsp;&nbsp; req.on(\'end\', function() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.writeHead(200, \"OK\", {\'Content-Type\': \'text/html\'});\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.end();\r\n&nbsp;&nbsp;&nbsp; });\r\n\r\n&nbsp; } else {\r\n&nbsp;&nbsp;&nbsp; console.log(\"[405] \" + req.method + \" to \" + req.url);\r\n&nbsp;&nbsp;&nbsp; res.writeHead(405, \"Method not supported\", {\'Content-Type\': \'text/html\'});\r\n&nbsp;&nbsp;&nbsp; res.end(\'405 - Method not supported\');\r\n&nbsp; }\r\n}).listen(portNumber); // listen on tcp portNumber value (all interfaces)\r\n\r\n\r\n\r\n</pre><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Itâ??s time to do something with our returned message text. We are going to make our bot in IRC send a message to the channel it resides in based off the text received from the JSON GET response body:</p><pre class=\"plain\" name=\"code\" style=\"box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro Semibold&quot;; font-size: 0.875rem; display: block; padding: 0.5em 1em; margin: 0px 0px 1em; line-height: 1.25rem; word-break: break-all; word-wrap: normal; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 0.375em; border-top-right-radius: 0.375em; border-bottom-right-radius: 0.375em; border-bottom-left-radius: 0.375em; height: auto; tab-size: 2; caret-color: rgb(51, 51, 51); font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">\r\nhttp.createServer(function (req, res) { // Set up web listener to receive Webhook POST / Relaying. AKA the magic.\r\n\r\n&nbsp; if (req.method == \'POST\') {\r\n\r\n&nbsp;&nbsp;&nbsp; req.on(\'data\', function(chunk) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var resObj = JSON.parse(chunk.toString());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sendRequest(messagesURL + resObj.data.id, \"GET\", sparkHeaders, \'\', function(resp){\r\n&nbsp;&nbsp;&nbsp;&nbsp; \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var myMessageObj = {};\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (resp.personEmail != botName.sparkEmail) {bot.say(myChannel, resp.text);}\r\n&nbsp;&nbsp;&nbsp;&nbsp; \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });\r\n&nbsp;&nbsp; \r\n&nbsp;&nbsp;&nbsp; });\r\n\r\n&nbsp;&nbsp;&nbsp; req.on(\'end\', function() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.writeHead(200, \"OK\", {\'Content-Type\': \'text/html\'});\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.end();\r\n&nbsp;&nbsp;&nbsp; });\r\n\r\n&nbsp; } else {\r\n&nbsp;&nbsp;&nbsp; console.log(\"[405] \" + req.method + \" to \" + req.url);\r\n&nbsp;&nbsp;&nbsp; res.writeHead(405, \"Method not supported\", {\'Content-Type\': \'text/html\'});\r\n&nbsp;&nbsp;&nbsp; res.end(\'405 - Method not supported\');\r\n&nbsp; }\r\n}).listen(portNumber); // listen on tcp portNumber value (all interfaces)\r\n\r\n\r\n\r\n</pre><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">If youâ??re testing the code as weâ??re walking through it, you might notice the botâ??s name is included in the message, due to the mention requirement discussed earlier. This wonâ??t look right to IRC users, as they wonâ??t know anything about the Spark bot, so weâ??ll create a String filter to remove the mention (note this may change in the future where the mention will be omitted, which may require a code change). While we are making that filter, letâ??s also look at other functionality our bot will need to be fully operational:</p><ul style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; caret-color: rgb(51, 51, 51); color: rgb(51, 51, 51); font-family: &quot;Cisco Sans Extra Light&quot;, sans-serif; font-size: 16px; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">Sending and receiving private messages</li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">Determining whether to send a private message, or a channel message</li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">Displaying a help message for new chat room users</li></ul><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Our solution to overcoming these obstacles is a function - this function will take the initial string received and search for a command, such as a short character combo like â??mâ?? or â??pmâ?? and then parse the individual words to follow. A message command may be as simple as â??m MESSAGEâ?? while a private message may be as complex as â??pm USER MESSAGEâ??. This means each of the commands will require a different number of arguments so we should create an object that defines how many arguments each command has:</p><pre class=\"plain\" name=\"code\" style=\"box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro Semibold&quot;; font-size: 0.875rem; display: block; padding: 0.5em 1em; margin: 0px 0px 1em; line-height: 1.25rem; word-break: break-all; word-wrap: normal; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 0.375em; border-top-right-radius: 0.375em; border-bottom-right-radius: 0.375em; border-bottom-left-radius: 0.375em; height: auto; tab-size: 2; caret-color: rgb(51, 51, 51); font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">var commands = {\r\n&nbsp; m:{args:0},\r\n&nbsp; pm:{args:1},\r\n&nbsp; help:{args:0}\r\n};\r\n\r\n\r\n\r\n</pre><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Phrasing can be pretty flexible since the bot needs to be mentioned before it will act, so accidental typing of letters like just â??mâ?? wonâ??t trigger any action unless preceded by the botname.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Now that the object contains each command and their argument count, letâ??s generate the function that will decipher the message text and output an object that contains all the necessary values to send the correct text to the correct destination in IRC:</p><pre class=\"plain\" name=\"code\" style=\"box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro Semibold&quot;; font-size: 0.875rem; display: block; padding: 0.5em 1em; margin: 0px 0px 1em; line-height: 1.25rem; word-break: break-all; word-wrap: normal; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 0.375em; border-top-right-radius: 0.375em; border-bottom-right-radius: 0.375em; border-bottom-left-radius: 0.375em; height: auto; tab-size: 2; caret-color: rgb(51, 51, 51); font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">function messageInterpreter(myMessage) {\r\n\r\n&nbsp; var myReturnObj = {};\r\n&nbsp; var preProcessedString = myMessage;\r\n&nbsp; var index = 0;\r\n\r\n&nbsp; if (myMessage === undefined) {\r\n&nbsp;&nbsp;&nbsp; return \'\';\r\n&nbsp; }\r\n\r\n&nbsp; //Determines Command\r\n&nbsp; preProcessedString = myMessage.slice(myMessage.search(botName.spark) + botName.spark.length + 1);\r\n&nbsp; if (preProcessedString.includes(\' \')) {\r\n&nbsp;&nbsp;&nbsp; index = preProcessedString.search(\' \');\r\n&nbsp;&nbsp;&nbsp; myReturnObj.command = preProcessedString.slice(0, index);\r\n&nbsp;&nbsp;&nbsp; preProcessedString = preProcessedString.slice(index + 1);\r\n&nbsp; } else {\r\n&nbsp;&nbsp;&nbsp; myReturnObj.command = preProcessedString.slice(0);\r\n&nbsp;&nbsp;&nbsp; return myReturnObj;\r\n&nbsp; }\r\n\r\n&nbsp; if (commands.hasOwnProperty(myReturnObj.command)) {\r\n&nbsp;&nbsp;&nbsp; myReturnObj.argument = {};\r\n&nbsp;&nbsp;&nbsp; for (i = 0; i &lt; commands[myReturnObj.command].args; i++) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; index = preProcessedString.search(\' \');\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myReturnObj.argument[i] = preProcessedString.slice(0, index);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; preProcessedString = preProcessedString.slice(index + 1);\r\n&nbsp;&nbsp;&nbsp; }\r\n&nbsp;&nbsp;&nbsp; myReturnObj.value = preProcessedString;\r\n&nbsp; }\r\n&nbsp; return myReturnObj;\r\n}\r\n\r\n\r\n\r\n</pre><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">The final step is to create the switch that controls what to do in response to each of the commands. This will be done from within the http serverâ??s logic:</p><pre class=\"plain\" name=\"code\" style=\"box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro Semibold&quot;; font-size: 0.875rem; display: block; padding: 0.5em 1em; margin: 0px 0px 1em; line-height: 1.25rem; word-break: break-all; word-wrap: normal; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 0.375em; border-top-right-radius: 0.375em; border-bottom-right-radius: 0.375em; border-bottom-left-radius: 0.375em; height: auto; tab-size: 2; caret-color: rgb(51, 51, 51); font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">\r\nhttp.createServer(function (req, res) { // Set up web listener to receive Webhook POST / Relaying. AKA the magic.\r\n\r\n&nbsp; if (req.method == \'POST\') {\r\n\r\n&nbsp;&nbsp;&nbsp; req.on(\'data\', function(chunk) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var resObj = JSON.parse(chunk.toString());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sendRequest(messagesURL + resObj.data.id, \"GET\", sparkHeaders, \'\', function(resp){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var myMessageObj = {};\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (resp.personEmail != botName.sparkEmail) {myMessageObj = messageInterpreter(resp.text);}\r\n&nbsp;&nbsp;&nbsp;&nbsp; \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (myMessageObj.command) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case \'pm\': \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (bot.chans[myChannel].users.hasOwnProperty(myMessageObj.argument[0]) &amp;&amp; myMessageObj.value !== \'\') {\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bot.say(myMessageObj.argument[0], myMessageObj.value);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else if (myMessageObj.value === \'\') {\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sendRequest(messagesURL, \"POST\", sparkHeaders, { roomId: myRoomID, text: \'PM FAILED TO \' + myMessageObj.argument[0] + \' FAILED: NO VALUE TO SEND\'}, function(resp){});\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sendRequest(messagesURL, \"POST\", sparkHeaders, { roomId: myRoomID, text: \'PM FAILED: USER \' + myMessageObj.argument[0] + \' DOESNT EXIST \'}, function(resp){});\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case \'m\':\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bot.say(myChannel, myMessageObj.value);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case \'help\':\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sendRequest(messagesURL, \"POST\", sparkHeaders, { roomId: myRoomID, text: helpMessage}, function(resp){});\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });\r\n&nbsp;&nbsp;&nbsp; });\r\n\r\n&nbsp;&nbsp;&nbsp; req.on(\'end\', function() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.writeHead(200, \"OK\", {\'Content-Type\': \'text/html\'});\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.end();\r\n&nbsp;&nbsp;&nbsp; });\r\n\r\n&nbsp; } else {\r\n&nbsp;&nbsp;&nbsp; console.log(\"[405] \" + req.method + \" to \" + req.url);\r\n&nbsp;&nbsp;&nbsp; res.writeHead(405, \"Method not supported\", {\'Content-Type\': \'text/html\'});\r\n&nbsp;&nbsp;&nbsp; res.end(\'405 - Method not supported\');\r\n&nbsp; }\r\n}).listen(portNumber); // listen on tcp portNumber value (all interfaces)\r\n\r\n\r\n\r\n</pre><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">And with that, you have the complete IRC to Cisco Spark and back demo bot. The complete code can be located on our<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/ciscospark/SparkIRCBot\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Github</a>, and if you have any questions or need any help, please feel free to reach out via<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-email-small\" href=\"mailto:devsupport@ciscospark.com\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 10pt; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px; line-height: 1.5em;\">devsupport@ciscospark.com</a>!</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Tim Scheuering, Customer Support Engineer</p>',NULL,NULL,'superadmin'),(64,'Changes to Admin and Compliance Scopes','Adam Kong','Hot Article','2018-06-26 15:27:50','Bot,Username,Changes',0,'	\r\n		<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">As a Webex developer, we want to give you advance notice of a key functionality change with<span class=\"Apple-converted-space\">&nbsp;</span><span style=\"box-sizing: border-box; font-family: &quot;courier new&quot;, courier;\">spark-admin</span><span class=\"Apple-converted-space\">&nbsp;</span>and<span class=\"Apple-converted-space\">&nbsp;</span><span style=\"box-sizing: border-box; font-family: &quot;courier new&quot;, courier;\">spark-compliance</span><span class=\"Apple-converted-space\">&nbsp;</span>scopes.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">The following authorization scopes are now deprecated and will no longer work after August 15, 2018:</p><ul style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; caret-color: rgb(51, 51, 51); color: rgb(51, 51, 51); font-family: &quot;Cisco Sans Extra Light&quot;, sans-serif; font-size: 16px; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\"><span style=\"box-sizing: border-box; font-family: &quot;courier new&quot;, courier;\">spark-admin:events_read</span></li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\"><span style=\"box-sizing: border-box; font-family: &quot;courier new&quot;, courier;\">spark-admin:memberships_read</span></li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\"><span style=\"box-sizing: border-box; font-family: &quot;courier new&quot;, courier;\">spark-admin:memberships_write</span></li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\"><span style=\"box-sizing: border-box; font-family: &quot;courier new&quot;, courier;\">spark-admin:messages_read</span></li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\"><span style=\"box-sizing: border-box; font-family: &quot;courier new&quot;, courier;\">spark-admin:messages_write</span></li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\"><span style=\"box-sizing: border-box; font-family: &quot;courier new&quot;, courier;\">spark-admin:rooms_read</span></li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\"><span style=\"box-sizing: border-box; font-family: &quot;courier new&quot;, courier;\">spark-admin:teams_read</span></li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\"><span style=\"box-sizing: border-box; font-family: &quot;courier new&quot;, courier;\">spark-admin:team_memberships_read</span></li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\"><span style=\"box-sizing: border-box; font-family: &quot;courier new&quot;, courier;\">spark-admin:team_memberships_write</span></li></ul><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Webex Teams apps which currently use<span class=\"Apple-converted-space\">&nbsp;</span><span style=\"box-sizing: border-box; font-family: &quot;courier new&quot;, courier;\">spark-admin</span><span class=\"Apple-converted-space\">&nbsp;</span>scopes to perform compliance activities as an organization administrator will need to transition to<span class=\"Apple-converted-space\">&nbsp;</span><span style=\"box-sizing: border-box; font-family: &quot;courier new&quot;, courier;\">spark-compliance</span>scopes over the next two months. After this change, organization administrators will no longer be able to perform compliance activities. Instead, these activities will be limited to only the compliance officers for an organization.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">The deprecated scopes have been removed from the Webex for Developers site and are no longer available for new applications, testing via Test Mode in the Webex Teams API Reference, or with an administratorâ??s portal token.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">If any of your apps make use of the<span class=\"Apple-converted-space\">&nbsp;</span><span style=\"box-sizing: border-box; font-family: &quot;courier new&quot;, courier;\">spark-admin</span><span class=\"Apple-converted-space\">&nbsp;</span>scopes listed above, please update them now.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">We\'ll keep you posted on any other changes on this, and, of course, will continue to update you on other refinements we make to further improve and enhance the Webex Teams API.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">â?? Pallavi Samanu, Senior Product Manager</p>',NULL,NULL,'superadmin'),(65,'Using PubNub for Enterprise Bots Behind the Firewall','test - Niall Murphy','Agent Interaction','2018-06-26 15:32:59','Bot,Username,Changes',1,'	\r\n		<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Building Cisco Webex Teams bots and integrations that need access to behind-the-firewall resources is a challenge that regularly faces developers building Webex applications for internal use. Webex API events are delivered with an HTTP push model that requires your bot to be hosted on a web server thatâ??s available on the public internet, but not all IT infrastructure allows for public web servers. To make this easier, we\'ve worked with<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://www.pubnub.com/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">PubNub</a><span class=\"Apple-converted-space\">&nbsp;</span>to create a reference architecture that allows enterprise applications to use PubNub\'s infrastructure to deploy bots and integrations behind the firewall.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">PubNub is a publish and subscribe service that makes it easy to deliver events to applications in real-time, across a wide variety of network configurations. If the application can reach the internet, it can receive PubNub events. Today we\'re publishing a reference architecture, helper applications, and sample code that allow you to use PubNub as a transport to get your Webex Teams events delivered behind the firewall, to mobile clients, or wherever you need them to go.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">This reference architecture uses PubNub as your webhook URL, and PubNub will publish all webhooks to a PubNub channel. Your application subscribes to this channel, receiving all webhooks over this channel in real time. Minimal changes are required to your application, often only requiring a few lines of code to be added.</p>',NULL,NULL,'superadmin'),(66,'Cisco Webex Cloud API Development Partners at Cisco Live! Orlando','Adam Kong','Cisco Spark','2018-06-26 16:01:43','Bot,Username,Changes',0,'	\r\n		<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">We are excited to have such an amazing group of development partners showcasing their solutions and platforms at<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://www.ciscolive.com/us/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Cisco Live! Orlando</a><span class=\"Apple-converted-space\">&nbsp;</span>from June 11th through June 14th.&nbsp; We are including a snapshot of our Webex Teams API partners who will be attending.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">If you\'re going, please stop by, say hello, get a demo, and find out how they can add value to your business.&nbsp; And, if you\'d like to connect with them before the show please reach out directly or through us.<span class=\"Apple-converted-space\">&nbsp;</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Make sure to print this out before you go!</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><br></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><a class=\"jive-link-external-small\" href=\"https://m.io/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\"><strong style=\"box-sizing: border-box; font-weight: bold;\">M.io</strong></a><span class=\"Apple-converted-space\">&nbsp;</span>- in the Cisco Live! Collaboration Village</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; padding-left: 30px;\">Unified team chat for Webex Teams and Slack<span class=\"Apple-converted-space\">&nbsp;</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><strong style=\"box-sizing: border-box; font-weight: bold;\"><a class=\"jive-link-external-small\" href=\"https://dynamicsignal.com/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Dynamic Signal<span class=\"Apple-converted-space\">&nbsp;</span></a></strong><span style=\"box-sizing: border-box; font-size: 13.3333px;\">- in the Cisco Live! Collaboration Village</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; padding-left: 30px;\">Connect with your most valuable assets. Your Employees.<span class=\"Apple-converted-space\">&nbsp;</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><a class=\"jive-link-external-small\" href=\"https://vbrick.com/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\"><strong style=\"box-sizing: border-box; font-weight: bold;\">Vbrick</strong></a><span class=\"Apple-converted-space\">&nbsp;</span>- booth # 1667<span class=\"Apple-converted-space\">&nbsp;</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; padding-left: 30px;\"><span style=\"box-sizing: border-box; font-size: 10pt;\">Enterprise Video.&nbsp; Like you\'ve never seen it!</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><span style=\"box-sizing: border-box; font-size: 10pt;\"><br style=\"box-sizing: border-box;\"></span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><span style=\"box-sizing: border-box; font-size: 10pt;\"><a class=\"jive-link-external-small\" href=\"https://www.oblong.com/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\"><strong style=\"box-sizing: border-box; font-weight: bold;\">Oblong</strong></a><span style=\"box-sizing: border-box; font-size: 13.3333px;\"><span class=\"Apple-converted-space\">&nbsp;</span>- in the Cisco Live! Collaboration Village</span></span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; padding-left: 30px;\"><span style=\"box-sizing: border-box; font-size: 10pt;\">Multi-stream content on top of Webex<span class=\"Apple-converted-space\">&nbsp;</span></span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><span style=\"box-sizing: border-box; font-size: 10pt;\"><strong style=\"box-sizing: border-box; font-weight: bold;\"><a class=\"jive-link-external-small\" href=\"https://www.vyopta.com/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Vyopta</a></strong><span style=\"box-sizing: border-box; font-size: 13.3333px;\"><span class=\"Apple-converted-space\">&nbsp;</span>- in the Cisco Live! Collaboration Village</span></span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; padding-left: 30px;\"><span style=\"box-sizing: border-box; font-size: 10pt;\">Unified Communications and Collaboration Performance Management</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><span style=\"box-sizing: border-box; font-size: 10pt;\"><br style=\"box-sizing: border-box;\"></span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><span style=\"box-sizing: border-box; font-size: 10pt;\"><strong style=\"box-sizing: border-box; font-weight: bold;\"><a class=\"jive-link-external-small\" href=\"https://www.actiance.com/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Actiance</a></strong><span style=\"box-sizing: border-box; font-size: 13.3333px;\"><span class=\"Apple-converted-space\">&nbsp;</span>- in the Cisco Live! Collaboration Village</span></span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; padding-left: 30px;\"><span style=\"box-sizing: border-box; font-size: 10pt;\">Redefining Archiving for Compliance</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><span style=\"box-sizing: border-box; font-size: 10pt;\"><br style=\"box-sizing: border-box;\"></span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><span style=\"box-sizing: border-box; font-size: 10pt;\"><strong style=\"box-sizing: border-box; font-weight: bold;\"><a class=\"jive-link-external-small\" href=\"https://www.singlewire.com/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Singlewire</a></strong><span class=\"Apple-converted-space\">&nbsp;</span>- booth # 1646</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; padding-left: 30px;\"><span style=\"box-sizing: border-box; font-size: 10pt;\">Emergency Notification with Informacast</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><span style=\"box-sizing: border-box; font-size: 10pt;\"><br style=\"box-sizing: border-box;\"></span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><span style=\"box-sizing: border-box; font-size: 10pt;\"><strong style=\"box-sizing: border-box; font-weight: bold;\"><a class=\"jive-link-external-small\" href=\"https://www.pega.com/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Pega</a></strong><span style=\"box-sizing: border-box; font-size: 13.3333px;\"><span class=\"Apple-converted-space\">&nbsp;</span>- in the Cisco Live! Collaboration Village</span></span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; padding-left: 30px;\"><span style=\"box-sizing: border-box; font-size: 10pt;\">Customer engagement.<span class=\"Apple-converted-space\">&nbsp;</span></span><span style=\"box-sizing: border-box; font-size: 10pt;\">Digital Process Automation.</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><span style=\"box-sizing: border-box; font-size: 10pt;\"><br style=\"box-sizing: border-box;\"></span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><span style=\"box-sizing: border-box; font-size: 10pt;\">See you there!<br style=\"box-sizing: border-box;\"></span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><span style=\"box-sizing: border-box; font-size: 10pt;\">-<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-email-small\" href=\"mailto:fgeck@cisco.com\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Frank Geck</a><span class=\"Apple-converted-space\">&nbsp;</span>&amp; the Webex ISV BD Team</span></p>',NULL,NULL,'superadmin'),(67,'Enhanced Communications with Cisco Webex Teams and Vyopta','Adam Kong','Administration','2018-06-26 16:14:32','Bot,Username,Changes',1,'	 		<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">How many times have you been on a conference call and people complain they can\'t hear you?</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; padding-left: 30px;\"><em style=\"box-sizing: border-box;\">\"You\'re breaking up!,\"<span class=\"Apple-converted-space\">&nbsp;</span></em></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; padding-left: 30px;\"><em style=\"box-sizing: border-box;\">\"Is it your cellular connection?,\"<span class=\"Apple-converted-space\">&nbsp;</span></em></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; padding-left: 30px;\"><em style=\"box-sizing: border-box;\">\"Is it your headset?,\"<span class=\"Apple-converted-space\">&nbsp;</span></em></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; padding-left: 30px;\"><em style=\"box-sizing: border-box;\">\"Is it your wireless network?\"</em></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><span style=\"box-sizing: border-box; font-size: 10pt;\">Experiencing communication breakdowns like these are all too familiar for many of us. The quality of your communications is absolutely critical for being successful in your career by being able to effectively get your messages across -- literally.&nbsp;<span class=\"Apple-converted-space\">&nbsp;</span></span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">I was once at a startup where the IT department deployed a low cost communication platform on an overburdened and thus ineffective network (overburdened perhaps because the four guys in engineering liked to play networked video games in the middle of the day when they were taking their break!).&nbsp; As a result, how was our sales strategy going?&nbsp; Very poorly.&nbsp; Every sales call was jittery - interrupted by the<span class=\"Apple-converted-space\">&nbsp;</span><em style=\"box-sizing: border-box;\">\"I can\'t hear you\"</em><span class=\"Apple-converted-space\">&nbsp;</span>and the classic,<span class=\"Apple-converted-space\">&nbsp;</span><em style=\"box-sizing: border-box;\">\"Can you hear me now?!\"</em><span class=\"Apple-converted-space\">&nbsp;</span>refrains. How do you close an end of quarter deal with poor communications like that?&nbsp; IT had no idea how to fix the problem and this scenario went on for months.&nbsp; To say that the sales team was furious was an understatement.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Enter Cisco Independent Software Vendor (ISV) Vyopta.<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://www.vyopta.com/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Vyopta</a><span class=\"Apple-converted-space\">&nbsp;</span>is the leading communication analytics platform on the market.&nbsp; For Unified Communications, video, and conference calling, Vyopta not only monitors quality of service, Vyopta pinpoints the crucial performance areas that need improvement.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><br></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Is there a router that can\'t handle the capacity and needs an upgrade? Is the sales team experiencing customer calls with less than optimal quality?&nbsp; What\'s the average packet loss across your calls?&nbsp; These are the types of questions that Vyopta answers, helps to troubleshoot, and ultimately resolve.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><a class=\"jive-link-external-small\" href=\"https://www.vyopta.com/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Vyopta</a><span class=\"Apple-converted-space\">&nbsp;</span>is a long time development partner with Cisco and they\'ve been an early adopter of our cloud APIs.&nbsp; Vyopta has deployed a bot to our<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://apphub.webex.com/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Webex App Hub</a><span class=\"Apple-converted-space\">&nbsp;</span>that allows IT departments to pull information from Vyopta when they are troubleshooting communication problems.&nbsp; Vyopta has also partnered with Cisco for Early Field Tests (EFT\'s) on our API\'s to help drive our strategic direction for mutual benefit.&nbsp; We love feedback like this from our development and ISV partners to make sure that we deliver the best APIs.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><br></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><span style=\"caret-color: rgb(106, 107, 108); color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-size: 16px; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration: none; display: inline !important; float: none;\">Additionally, reflecting the spirit of our Webex Teams APIs and open standards, we also love the fact that Vyopta can do their analysis in mixed environments. It\'s important to recognize that most large companies have mixed environments.&nbsp; For example, Cisco mixed with Avaya mixed with Polycom -- not a problem for Vyopta.&nbsp; They\'ve integrated with virtually all of the communication platforms.</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><span style=\"caret-color: rgb(106, 107, 108); color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-size: 16px; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration: none; display: inline !important; float: none;\"><br></span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><br></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">This is a big reason why Vyopta has been added to the Cisco Global Price List (GPL) with an annuity SKU.&nbsp; What that means is if you\'re part of the Cisco sales ecosystem, you get compensated when including Vyopta in a deal.&nbsp; If you\'re selling to a new Webex customer, you want to show Vyopta as well.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Vyopta can show direct improvements in quality of service and utilization as a result of modifications that are implemented, which have been driven from their analysis.&nbsp; Add to that a dramatic drop in IT help desk requests, thereby increasing company productivity by removing time spent submitting and addressing IT issues -- something no one wishes to spend their time at work on.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">If you want your communication platform to work as it should, then you want to check out<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://www.vyopta.com/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Vyopta</a>.&nbsp; Optimize your collaboration environment!</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">-<span class=\"Apple-converted-space\">&nbsp;</span><strong style=\"box-sizing: border-box; font-weight: bold;\">Frank Geck</strong>, Cisco Webex Solution Partners Business Development Manager</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><span style=\"caret-color: rgb(106, 107, 108); color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-size: 16px; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration: none; display: inline !important; float: none;\"></span></p>',NULL,NULL,'superadmin'),(94,'Optimizing Webex Bot Development with the Webex API Emulator','Adam Kong','Hot Article','2018-07-10 12:25:52','Bot,Username,Changes',0,'		\r\n		<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Do you develop bots for<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://www.webex.com/products/teams/index.html\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Cisco Webex Teams</a><span class=\"Apple-converted-space\">&nbsp;</span>(formerly Cisco Spark)?&nbsp; Do you ever wish that there was a way to create a set of regression tests to ensure that your bot behaves consistently given the same input?&nbsp; Or maybe you wish that there was a way to speed up your iterative development/debug process when you are working on a bot response to a complex set of input?&nbsp; Or perhaps, you just wished you could do some bot development work when you were in a place that didnâ??t have good internet connectivity?</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">If so, Iâ??m happy to let you know that the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/webex/webex-api-emulator\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Webex API Emulator</a>, originally created by<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/SteveSfartz\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">StÃ¨ve Sfartz</a>, API Evangelist at Cisco DevNet, can help make your wishes come true.&nbsp; The emulator is a simple node.js project which you can download from GitHub and run locally.&nbsp; It loads a tokens.json configuration file that tells it about the users that can interact with it.&nbsp; This file, which is editable by you, allows you to create â??authorization tokensâ?? and â??personIdsâ?? for your bot, your tester and any other â??peopleâ?? that might be added to spaces as part of your tests.&nbsp;&nbsp; Think of it as your own, local, common identity server.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Letâ??s start making those wishes come true by dealing with the last wish first, the idea of doing bot development when you are offline.&nbsp; Once the emulator is up and running you can use a tool like<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://www.getpostman.com/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Postman</a><span class=\"Apple-converted-space\">&nbsp;</span>to send requests to the Webex API Emulator to do things like create spaces, add a user (or bot) to a space, or post a message to the space.&nbsp; The emulator also supports the webhooks API so if you configure your bot to talk to your locally running instance of the emulator, your bot will get notified when it is added to a space or when a message is sent to it.&nbsp; Once you can can send a message to your bot via the emulator,&nbsp; you can open up your favorite editor or debugger, and you can start stepping through your botâ??s responses to these commands, building and debugging responses to these inputs, all without an internet connection.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Weâ??ve glossed over a few things here, but weâ??ll get back to it.&nbsp; Assume you are now able to send commands to your bot via Postman and see the Webex API requests that your bot makes in response, all offline.&nbsp; Handy for working offline, right?&nbsp; But once you get used to this, you may start to realize that running in this mode simplifies your development motion even when you DO have an internet connection.&nbsp; Imagine your bot needs to have a particular response in certain specific, potentially complex, circumstances.&nbsp; For example if you send your bot a message like â??who from my company is in this roomâ??,&nbsp; you might want it to list people from your company but also be sure that it skips people from other companies.&nbsp; Youâ??d want to make sure that the bot behaves properly in circumstances where there are no people from your company, some people from your company, no people from other companies and some people from other companies.&nbsp; To test this youâ??d ideally create a several spaces and add several combinations of people to each of those space, and then type in your requests in all those spaces.&nbsp; Doing this manually in the Webex Teams app can be time consuming and it might not make your test subjects very happy to keep getting added to different spaces as you test different variations!</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">With Postman and the emulator, you can make the API calls to create the spaces, others to add each of the users, and another set to send in the commands.&nbsp; These can then be saved in<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://www.getpostman.com/docs/v6/postman/collections/creating_collections\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">a postman collection</a><span class=\"Apple-converted-space\">&nbsp;</span>and run with a couple of keystrokes.&nbsp; Your bot didnâ??t respond as you expected?&nbsp; Simply stop the emulator and your bot and restart them (in that order!).&nbsp; This brings you back to a pristine environment where no spaces have been created yet.&nbsp; Alternately, have another set of commands to delete the spaces and run your test again as often as you like, until it works perfectly for all the variations that you care to test for!</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Hmm, as we start building up these sets of API calls to emulate user input that we want our bot to respond to, we are starting to get close to what some might call a regression test.&nbsp; There is still one problem though, a true regression test should also validate the responses from your bot.&nbsp; Luckily the Webex API Emulator also supports â??bot test modeâ??.&nbsp; In this mode we can instruct the emulator to look for bot responses to certain input and provide that back in its responses to us.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">In order to better understand how bot test mode works weâ??ve created a<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/jpjpjp/bot-test-framework-example\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">bot-test-framework-example</a><span class=\"Apple-converted-space\">&nbsp;</span>to demonstrate a set of tests in action.&nbsp; It includes a link to the Webex API Emulator project, a sample bot, a full collection of Postman tests and a detailed set of instructions to help you get this going.&nbsp; Since the Webex API emulator is written in javascript we chose a<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/valgaze/sparkbotstarter\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">node.js sparkbotstarter project</a><span class=\"Apple-converted-space\">&nbsp;</span>originally written by<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/valgaze\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Victor Algaze</a>, based on the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/flint-bot/flint\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">node-flint framework</a><span class=\"Apple-converted-space\">&nbsp;</span>created by<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/nmarus\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Nick Marus</a>.&nbsp; We hope to add some bots built with python in the future.&nbsp; The emulator doesnâ??t care about your framework, but you DO need to be able to configure the Webex API endpoint that your bot sends requests to.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Now, letâ??s get a flavor for how bot test mode works.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Before we could run any tests we needed to start our Webex API Emulator in â??bot test modeâ?? and start our bot using an API token specified in the emulatorâ??s tokens.json file.&nbsp;&nbsp; When weâ??ve got the the emulator and our bot running properly weâ??ll have some terminal windows that look something like this:</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><a href=\"https://communities.cisco.com/servlet/JiveServlet/showImage/38-9801-116804/Webex+Emulator1.png\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\"><img alt=\"Webex Emulator1.png\" class=\"image-1 jive-image\" src=\"https://communities.cisco.com/servlet/JiveServlet/downloadImage/38-9801-116804/353-364/Webex+Emulator1.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 100%; height: 364.193px; width: 353px; display: block; margin-left: auto; margin-right: auto;\" width=\"353\" height=\"364\"></a></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Once those services are running we can start sending in our test input.&nbsp; The first couple of test cases donâ??t generate any bot reaction, they simply set our state.</p><ol style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; caret-color: rgb(51, 51, 51); color: rgb(51, 51, 51); font-family: &quot;Cisco Sans Extra Light&quot;, sans-serif; font-size: 16px; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">We create a new space via a POST to the /rooms API and store the roomId in a postman environment variable called â??_roomâ??.</li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">We then add our bot to the space via a POST the /memberships API.</li></ol><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Now we are ready to send a message to the bot and check if it responds as we expect.&nbsp; Hereâ??s what that request looks like in postman:</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><a href=\"https://communities.cisco.com/servlet/JiveServlet/showImage/38-9801-116805/Webex+Emulator2.png\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\"><img alt=\"Webex Emulator2.png\" class=\"jive-image image-2\" src=\"https://communities.cisco.com/servlet/JiveServlet/downloadImage/38-9801-116805/348-148/Webex+Emulator2.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 100%; height: 147.793px; width: 348px; display: block; margin-left: auto; margin-right: auto;\" width=\"348\" height=\"148\"></a></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">This is a fairly standard POST to the /messages endpoint with a body which specifies the roomId of the previously created space (stored in a postman environment variable), and includes some markdown which mentions our bot and sends the command â??/leaveâ??.&nbsp; (Note that all of the environment variables used in these test cases are explained in more detail in the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/jpjpjp/bot-test-framework-example\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">bot-test-framework-example</a><span class=\"Apple-converted-space\">&nbsp;</span>readme).&nbsp; Now letâ??s look at what makes this request a true â??regression testâ??.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Here are the headers for this request:</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><a href=\"https://communities.cisco.com/servlet/JiveServlet/showImage/38-9801-116806/Webex+Emulator3.png\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\"><img alt=\"Webex Emulator3.png\" class=\"jive-image image-3\" src=\"https://communities.cisco.com/servlet/JiveServlet/downloadImage/38-9801-116806/362-146/Webex+Emulator3.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 100%; height: 145.566px; width: 362px; display: block; margin-left: auto; margin-right: auto;\" width=\"362\" height=\"146\"></a></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">The Authorization and Content-Type headers should look familiar to anyone who has used postman to send requests to the Webex API, but there is a new header â??X-Bot-Responsesâ?? as well.&nbsp; When the emulator sees a request with this header, it understands that we expect the bot under test to make two subsequent requests in response to this command.&nbsp; It will â??interceptâ?? the original response to this request and â??holdâ?? it until it gets the two bot requests and then build out a consolidated response that looks something like this:</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><a href=\"https://communities.cisco.com/servlet/JiveServlet/showImage/38-9801-116807/Webex+Emulator4.png\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\"><img alt=\"Webex Emulator4.png\" class=\"jive-image image-4\" src=\"https://communities.cisco.com/servlet/JiveServlet/downloadImage/38-9801-116807/475-335/Webex+Emulator4.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 100%; width: 475.37px; display: block; margin-left: auto; margin-right: auto;\" width=\"475\" height=\"335\"></a></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">This response contains two objects:</p><ol style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; caret-color: rgb(51, 51, 51); color: rgb(51, 51, 51); font-family: &quot;Cisco Sans Extra Light&quot;, sans-serif; font-size: 16px; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">A testFrameworkResponse which is the emulatorâ??s original response to our POST to the /messages endpoint</li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">An array of botResponses, which show us the requests that the bot made in response to our test input.&nbsp; In this case, our bot made a POST to the /messages endpoint with the text â??OK.&nbsp; I know when Iâ??m not wantedâ?¦â??.&nbsp; It then made a DELETE call to the memberships API and deleted its membership in the space, effectively leaving the room.</li></ol><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Finally, notice the â??Test Resultsâ?? circled in the image above.&nbsp; For each step in our test suite, we created<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"http://blog.getpostman.com/2017/10/25/writing-tests-in-postman/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Postman test cases</a><span class=\"Apple-converted-space\">&nbsp;</span>to validate that the API response was as expected, and when appropriate, that the bot responded as expected as well.&nbsp; We wonâ??t delve too deeply into how these tests work, but a full set of example postman tests, including the test cases are provided in the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/jpjpjp/bot-test-framework-example\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">bot-test-framework-example</a>.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">While there are a lot of moving parts here to make this work, we think it can ultimately speed up your bot development process.&nbsp; Iâ??ve been using this for a few months now and the regression tests have helped me discover bugs in my bots that I would have depended on users finding for me without it.&nbsp; I also love being able to work on a bot while on an airplane with sketchy internet connectivity!<span class=\"Apple-converted-space\">&nbsp;</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">If you decide to give the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/webex/webex-api-emulator\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Webex API Emulator</a><span class=\"Apple-converted-space\">&nbsp;</span>and<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/jpjpjp/bot-test-framework-example\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">bot-test-framework-example</a><span class=\"Apple-converted-space\">&nbsp;</span>a try, weâ??d love to hear how it goes. git<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://eurl.io/#HyfEkmq2f\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Join the Ask Webex API Emulator space</a><span class=\"Apple-converted-space\">&nbsp;</span>on Webex Teams and give us feedback.&nbsp; Right now this is just another Webex API developer community supported project, and we hope this post makes it clear that tools like this only happen with an active and engaged developer community who make contributions like<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/SteveSfartz\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">StÃ¨ve</a>,<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/valgaze\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Victor</a><span class=\"Apple-converted-space\">&nbsp;</span>and<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/nmarus\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Nick</a><span class=\"Apple-converted-space\">&nbsp;</span>have done.&nbsp; Who knows though, if usage of the emulator really takes off, we may someday be able to turn it into a full fledged service provided by Cisco.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Let us know what you think!</p>',NULL,'Webex+Emulator1.png-Webex+Emulator2.png-Webex+Emulator3.png-Webex+Emulator4.png','superadmin'),(95,'Optimizing\'s Webex Bot Development with the Webex API Emulator','Adam\'s Kong','Cisco Spark','2018-07-15 13:17:08','Bot\'s,Username,Changes',1,'		\r\n		<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Do you develop bots for<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://www.webex.com/products/teams/index.html\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Cisco Webex Teams</a><span class=\"Apple-converted-space\">&nbsp;</span>(formerly Cisco Spark)?&nbsp; Do you ever wish that there was a way to create a set of regression tests to ensure that your bot behaves consistently given the same input?&nbsp; Or maybe you wish that there was a way to speed up your iterative development/debug process when you are working on a bot response to a complex set of input?&nbsp; Or perhaps, you just wished you could do some bot development work when you were in a place that didnâ??t have good internet connectivity?</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">If so, Iâ??m happy to let you know that the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/webex/webex-api-emulator\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Webex API Emulator</a>, originally created by<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/SteveSfartz\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">StÃ¨ve Sfartz</a>, API Evangelist at Cisco DevNet, can help make your wishes come true.&nbsp; The emulator is a simple node.js project which you can download from GitHub and run locally.&nbsp; It loads a tokens.json configuration file that tells it about the users that can interact with it.&nbsp; This file, which is editable by you, allows you to create â??authorization tokensâ?? and â??personIdsâ?? for your bot, your tester and any other â??peopleâ?? that might be added to spaces as part of your tests.&nbsp;&nbsp; Think of it as your own, local, common identity server.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Letâ??s start making those wishes come true by dealing with the last wish first, the idea of doing bot development when you are offline.&nbsp; Once the emulator is up and running you can use a tool like<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://www.getpostman.com/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Postman</a><span class=\"Apple-converted-space\">&nbsp;</span>to send requests to the Webex API Emulator to do things like create spaces, add a user (or bot) to a space, or post a message to the space.&nbsp; The emulator also supports the webhooks API so if you configure your bot to talk to your locally running instance of the emulator, your bot will get notified when it is added to a space or when a message is sent to it.&nbsp; Once you can can send a message to your bot via the emulator,&nbsp; you can open up your favorite editor or debugger, and you can start stepping through your botâ??s responses to these commands, building and debugging responses to these inputs, all without an internet connection.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Weâ??ve glossed over a few things here, but weâ??ll get back to it.&nbsp; Assume you are now able to send commands to your bot via Postman and see the Webex API requests that your bot makes in response, all offline.&nbsp; Handy for working offline, right?&nbsp; But once you get used to this, you may start to realize that running in this mode simplifies your development motion even when you DO have an internet connection.&nbsp; Imagine your bot needs to have a particular response in certain specific, potentially complex, circumstances.&nbsp; For example if you send your bot a message like â??who from my company is in this roomâ??,&nbsp; you might want it to list people from your company but also be sure that it skips people from other companies.&nbsp; Youâ??d want to make sure that the bot behaves properly in circumstances where there are no people from your company, some people from your company, no people from other companies and some people from other companies.&nbsp; To test this youâ??d ideally create a several spaces and add several combinations of people to each of those space, and then type in your requests in all those spaces.&nbsp; Doing this manually in the Webex Teams app can be time consuming and it might not make your test subjects very happy to keep getting added to different spaces as you test different variations!</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">With Postman and the emulator, you can make the API calls to create the spaces, others to add each of the users, and another set to send in the commands.&nbsp; These can then be saved in<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://www.getpostman.com/docs/v6/postman/collections/creating_collections\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">a postman collection</a><span class=\"Apple-converted-space\">&nbsp;</span>and run with a couple of keystrokes.&nbsp; Your bot didnâ??t respond as you expected?&nbsp; Simply stop the emulator and your bot and restart them (in that order!).&nbsp; This brings you back to a pristine environment where no spaces have been created yet.&nbsp; Alternately, have another set of commands to delete the spaces and run your test again as often as you like, until it works perfectly for all the variations that you care to test for!</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Hmm, as we start building up these sets of API calls to emulate user input that we want our bot to respond to, we are starting to get close to what some might call a regression test.&nbsp; There is still one problem though, a true regression test should also validate the responses from your bot.&nbsp; Luckily the Webex API Emulator also supports â??bot test modeâ??.&nbsp; In this mode we can instruct the emulator to look for bot responses to certain input and provide that back in its responses to us.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">In order to better understand how bot test mode works weâ??ve created a<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/jpjpjp/bot-test-framework-example\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">bot-test-framework-example</a><span class=\"Apple-converted-space\">&nbsp;</span>to demonstrate a set of tests in action.&nbsp; It includes a link to the Webex API Emulator project, a sample bot, a full collection of Postman tests and a detailed set of instructions to help you get this going.&nbsp; Since the Webex API emulator is written in javascript we chose a<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/valgaze/sparkbotstarter\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">node.js sparkbotstarter project</a><span class=\"Apple-converted-space\">&nbsp;</span>originally written by<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/valgaze\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Victor Algaze</a>, based on the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/flint-bot/flint\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">node-flint framework</a><span class=\"Apple-converted-space\">&nbsp;</span>created by<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/nmarus\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Nick Marus</a>.&nbsp; We hope to add some bots built with python in the future.&nbsp; The emulator doesnâ??t care about your framework, but you DO need to be able to configure the Webex API endpoint that your bot sends requests to.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Now, letâ??s get a flavor for how bot test mode works.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Before we could run any tests we needed to start our Webex API Emulator in â??bot test modeâ?? and start our bot using an API token specified in the emulatorâ??s tokens.json file.&nbsp;&nbsp; When weâ??ve got the the emulator and our bot running properly weâ??ll have some terminal windows that look something like this:</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><a href=\"https://communities.cisco.com/servlet/JiveServlet/showImage/38-9801-116804/Webex+Emulator1.png\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\"><img alt=\"Webex Emulator1.png\" class=\"image-1 jive-image\" src=\"https://communities.cisco.com/servlet/JiveServlet/downloadImage/38-9801-116804/353-364/Webex+Emulator1.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 100%; height: 364.193px; width: 353px; display: block; margin-left: auto; margin-right: auto;\" width=\"353\" height=\"364\"></a></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Once those services are running we can start sending in our test input.&nbsp; The first couple of test cases donâ??t generate any bot reaction, they simply set our state.</p><ol style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; caret-color: rgb(51, 51, 51); color: rgb(51, 51, 51); font-family: &quot;Cisco Sans Extra Light&quot;, sans-serif; font-size: 16px; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">We create a new space via a POST to the /rooms API and store the roomId in a postman environment variable called â??_roomâ??.</li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">We then add our bot to the space via a POST the /memberships API.</li></ol><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Now we are ready to send a message to the bot and check if it responds as we expect.&nbsp; Hereâ??s what that request looks like in postman:</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><a href=\"https://communities.cisco.com/servlet/JiveServlet/showImage/38-9801-116805/Webex+Emulator2.png\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\"><img alt=\"Webex Emulator2.png\" class=\"jive-image image-2\" src=\"https://communities.cisco.com/servlet/JiveServlet/downloadImage/38-9801-116805/348-148/Webex+Emulator2.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 100%; height: 147.793px; width: 348px; display: block; margin-left: auto; margin-right: auto;\" width=\"348\" height=\"148\"></a></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">This is a fairly standard POST to the /messages endpoint with a body which specifies the roomId of the previously created space (stored in a postman environment variable), and includes some markdown which mentions our bot and sends the command â??/leaveâ??.&nbsp; (Note that all of the environment variables used in these test cases are explained in more detail in the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/jpjpjp/bot-test-framework-example\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">bot-test-framework-example</a><span class=\"Apple-converted-space\">&nbsp;</span>readme).&nbsp; Now letâ??s look at what makes this request a true â??regression testâ??.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Here are the headers for this request:</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><a href=\"https://communities.cisco.com/servlet/JiveServlet/showImage/38-9801-116806/Webex+Emulator3.png\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\"><img alt=\"Webex Emulator3.png\" class=\"jive-image image-3\" src=\"https://communities.cisco.com/servlet/JiveServlet/downloadImage/38-9801-116806/362-146/Webex+Emulator3.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 100%; height: 145.566px; width: 362px; display: block; margin-left: auto; margin-right: auto;\" width=\"362\" height=\"146\"></a></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">The Authorization and Content-Type headers should look familiar to anyone who has used postman to send requests to the Webex API, but there is a new header â??X-Bot-Responsesâ?? as well.&nbsp; When the emulator sees a request with this header, it understands that we expect the bot under test to make two subsequent requests in response to this command.&nbsp; It will â??interceptâ?? the original response to this request and â??holdâ?? it until it gets the two bot requests and then build out a consolidated response that looks something like this:</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><a href=\"https://communities.cisco.com/servlet/JiveServlet/showImage/38-9801-116807/Webex+Emulator4.png\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\"><img alt=\"Webex Emulator4.png\" class=\"jive-image image-4\" src=\"https://communities.cisco.com/servlet/JiveServlet/downloadImage/38-9801-116807/475-335/Webex+Emulator4.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 100%; width: 475.37px; display: block; margin-left: auto; margin-right: auto;\" width=\"475\" height=\"335\"></a></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">This response contains two objects:</p><ol style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; caret-color: rgb(51, 51, 51); color: rgb(51, 51, 51); font-family: &quot;Cisco Sans Extra Light&quot;, sans-serif; font-size: 16px; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">A testFrameworkResponse which is the emulatorâ??s original response to our POST to the /messages endpoint</li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">An array of botResponses, which show us the requests that the bot made in response to our test input.&nbsp; In this case, our bot made a POST to the /messages endpoint with the text â??OK.&nbsp; I know when Iâ??m not wantedâ?¦â??.&nbsp; It then made a DELETE call to the memberships API and deleted its membership in the space, effectively leaving the room.</li></ol><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Finally, notice the â??Test Resultsâ?? circled in the image above.&nbsp; For each step in our test suite, we created<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"http://blog.getpostman.com/2017/10/25/writing-tests-in-postman/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Postman test cases</a><span class=\"Apple-converted-space\">&nbsp;</span>to validate that the API response was as expected, and when appropriate, that the bot responded as expected as well.&nbsp; We wonâ??t delve too deeply into how these tests work, but a full set of example postman tests, including the test cases are provided in the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/jpjpjp/bot-test-framework-example\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">bot-test-framework-example</a>.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">While there are a lot of moving parts here to make this work, we think it can ultimately speed up your bot development process.&nbsp; Iâ??ve been using this for a few months now and the regression tests have helped me discover bugs in my bots that I would have depended on users finding for me without it.&nbsp; I also love being able to work on a bot while on an airplane with sketchy internet connectivity!<span class=\"Apple-converted-space\">&nbsp;</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">If you decide to give the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/webex/webex-api-emulator\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Webex API Emulator</a><span class=\"Apple-converted-space\">&nbsp;</span>and<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/jpjpjp/bot-test-framework-example\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">bot-test-framework-example</a><span class=\"Apple-converted-space\">&nbsp;</span>a try, weâ??d love to hear how it goes. git<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://eurl.io/#HyfEkmq2f\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Join the Ask Webex API Emulator space</a><span class=\"Apple-converted-space\">&nbsp;</span>on Webex Teams and give us feedback.&nbsp; Right now this is just another Webex API developer community supported project, and we hope this post makes it clear that tools like this only happen with an active and engaged developer community who make contributions like<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/SteveSfartz\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">StÃ¨ve</a>,<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/valgaze\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Victor</a><span class=\"Apple-converted-space\">&nbsp;</span>and<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/nmarus\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Nick</a><span class=\"Apple-converted-space\">&nbsp;</span>have done.&nbsp; Who knows though, if usage of the emulator really takes off, we may someday be able to turn it into a full fledged service provided by Cisco.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Let us know what you think!</p>',NULL,'Webex+Emulator1.png-Webex+Emulator2.png-Webex+Emulator3.png-Webex+Emulator4.png','superadmin'),(105,'Optimizing Webex Bot Development with the Webex API Emulator','JP Shipherd','Cisco Spark','2018-07-17 22:36:23','Bot Username Changes',1,'		\r\n		<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Do you develop bots for<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://www.webex.com/products/teams/index.html\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Cisco Webex Teams</a><span class=\"Apple-converted-space\">&nbsp;</span>(formerly Cisco Spark)?&nbsp; Do you ever wish that there was a way to create a set of regression tests to ensure that your bot behaves consistently given the same input?&nbsp; Or maybe you wish that there was a way to speed up your iterative development/debug process when you are working on a bot response to a complex set of input?&nbsp; Or perhaps, you just wished you could do some bot development work when you were in a place that didn’t have good internet connectivity?</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">If so, I’m happy to let you know that the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/webex/webex-api-emulator\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Webex API Emulator</a>, originally created by<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/SteveSfartz\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Stève Sfartz</a>, API Evangelist at Cisco DevNet, can help make your wishes come true.&nbsp; The emulator is a simple node.js project which you can download from GitHub and run locally.&nbsp; It loads a tokens.json configuration file that tells it about the users that can interact with it.&nbsp; This file, which is editable by you, allows you to create “authorization tokens” and “personIds” for your bot, your tester and any other “people” that might be added to spaces as part of your tests.&nbsp;&nbsp; Think of it as your own, local, common identity server.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Let’s start making those wishes come true by dealing with the last wish first, the idea of doing bot development when you are offline.&nbsp; Once the emulator is up and running you can use a tool like<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://www.getpostman.com/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Postman</a><span class=\"Apple-converted-space\">&nbsp;</span>to send requests to the Webex API Emulator to do things like create spaces, add a user (or bot) to a space, or post a message to the space.&nbsp; The emulator also supports the webhooks API so if you configure your bot to talk to your locally running instance of the emulator, your bot will get notified when it is added to a space or when a message is sent to it.&nbsp; Once you can can send a message to your bot via the emulator,&nbsp; you can open up your favorite editor or debugger, and you can start stepping through your bot’s responses to these commands, building and debugging responses to these inputs, all without an internet connection.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">We’ve glossed over a few things here, but we’ll get back to it.&nbsp; Assume you are now able to send commands to your bot via Postman and see the Webex API requests that your bot makes in response, all offline.&nbsp; Handy for working offline, right?&nbsp; But once you get used to this, you may start to realize that running in this mode simplifies your development motion even when you DO have an internet connection.&nbsp; Imagine your bot needs to have a particular response in certain specific, potentially complex, circumstances.&nbsp; For example if you send your bot a message like “who from my company is in this room”,&nbsp; you might want it to list people from your company but also be sure that it skips people from other companies.&nbsp; You’d want to make sure that the bot behaves properly in circumstances where there are no people from your company, some people from your company, no people from other companies and some people from other companies.&nbsp; To test this you’d ideally create a several spaces and add several combinations of people to each of those space, and then type in your requests in all those spaces.&nbsp; Doing this manually in the Webex Teams app can be time consuming and it might not make your test subjects very happy to keep getting added to different spaces as you test different variations!</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">With Postman and the emulator, you can make the API calls to create the spaces, others to add each of the users, and another set to send in the commands.&nbsp; These can then be saved in<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://www.getpostman.com/docs/v6/postman/collections/creating_collections\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">a postman collection</a><span class=\"Apple-converted-space\">&nbsp;</span>and run with a couple of keystrokes.&nbsp; Your bot didn’t respond as you expected?&nbsp; Simply stop the emulator and your bot and restart them (in that order!).&nbsp; This brings you back to a pristine environment where no spaces have been created yet.&nbsp; Alternately, have another set of commands to delete the spaces and run your test again as often as you like, until it works perfectly for all the variations that you care to test for!</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Hmm, as we start building up these sets of API calls to emulate user input that we want our bot to respond to, we are starting to get close to what some might call a regression test.&nbsp; There is still one problem though, a true regression test should also validate the responses from your bot.&nbsp; Luckily the Webex API Emulator also supports “bot test mode”.&nbsp; In this mode we can instruct the emulator to look for bot responses to certain input and provide that back in its responses to us.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">In order to better understand how bot test mode works we’ve created a<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/jpjpjp/bot-test-framework-example\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">bot-test-framework-example</a><span class=\"Apple-converted-space\">&nbsp;</span>to demonstrate a set of tests in action.&nbsp; It includes a link to the Webex API Emulator project, a sample bot, a full collection of Postman tests and a detailed set of instructions to help you get this going.&nbsp; Since the Webex API emulator is written in javascript we chose a<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/valgaze/sparkbotstarter\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">node.js sparkbotstarter project</a><span class=\"Apple-converted-space\">&nbsp;</span>originally written by<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/valgaze\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Victor Algaze</a>, based on the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/flint-bot/flint\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">node-flint framework</a><span class=\"Apple-converted-space\">&nbsp;</span>created by<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/nmarus\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Nick Marus</a>.&nbsp; We hope to add some bots built with python in the future.&nbsp; The emulator doesn’t care about your framework, but you DO need to be able to configure the Webex API endpoint that your bot sends requests to.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Now, let’s get a flavor for how bot test mode works.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Before we could run any tests we needed to start our Webex API Emulator in “bot test mode” and start our bot using an API token specified in the emulator’s tokens.json file.&nbsp;&nbsp; When we’ve got the the emulator and our bot running properly we’ll have some terminal windows that look something like this:</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><a href=\"https://communities.cisco.com/servlet/JiveServlet/showImage/38-9801-116804/Webex+Emulator1.png\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\"><img alt=\"Webex Emulator1.png\" class=\"image-1 jive-image\" src=\"https://communities.cisco.com/servlet/JiveServlet/downloadImage/38-9801-116804/353-364/Webex+Emulator1.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 100%; height: 364.193px; width: 353px; display: block; margin-left: auto; margin-right: auto;\" width=\"353\" height=\"364\"></a></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Once those services are running we can start sending in our test input.&nbsp; The first couple of test cases don’t generate any bot reaction, they simply set our state.</p><ol style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; caret-color: rgb(51, 51, 51); color: rgb(51, 51, 51); font-family: &quot;Cisco Sans Extra Light&quot;, sans-serif; font-size: 16px; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">We create a new space via a POST to the /rooms API and store the roomId in a postman environment variable called “_room”.</li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">We then add our bot to the space via a POST the /memberships API.</li></ol><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Now we are ready to send a message to the bot and check if it responds as we expect.&nbsp; Here’s what that request looks like in postman:</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><a href=\"https://communities.cisco.com/servlet/JiveServlet/showImage/38-9801-116805/Webex+Emulator2.png\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\"><img alt=\"Webex Emulator2.png\" class=\"jive-image image-2\" src=\"https://communities.cisco.com/servlet/JiveServlet/downloadImage/38-9801-116805/348-148/Webex+Emulator2.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 100%; height: 147.793px; width: 348px; display: block; margin-left: auto; margin-right: auto;\" width=\"348\" height=\"148\"></a></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">This is a fairly standard POST to the /messages endpoint with a body which specifies the roomId of the previously created space (stored in a postman environment variable), and includes some markdown which mentions our bot and sends the command “/leave”.&nbsp; (Note that all of the environment variables used in these test cases are explained in more detail in the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/jpjpjp/bot-test-framework-example\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">bot-test-framework-example</a><span class=\"Apple-converted-space\">&nbsp;</span>readme).&nbsp; Now let’s look at what makes this request a true “regression test”.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Here are the headers for this request:</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><a href=\"https://communities.cisco.com/servlet/JiveServlet/showImage/38-9801-116806/Webex+Emulator3.png\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\"><img alt=\"Webex Emulator3.png\" class=\"jive-image image-3\" src=\"https://communities.cisco.com/servlet/JiveServlet/downloadImage/38-9801-116806/362-146/Webex+Emulator3.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 100%; height: 145.566px; width: 362px; display: block; margin-left: auto; margin-right: auto;\" width=\"362\" height=\"146\"></a></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">The Authorization and Content-Type headers should look familiar to anyone who has used postman to send requests to the Webex API, but there is a new header “X-Bot-Responses” as well.&nbsp; When the emulator sees a request with this header, it understands that we expect the bot under test to make two subsequent requests in response to this command.&nbsp; It will “intercept” the original response to this request and “hold” it until it gets the two bot requests and then build out a consolidated response that looks something like this:</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><a href=\"https://communities.cisco.com/servlet/JiveServlet/showImage/38-9801-116807/Webex+Emulator4.png\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\"><img alt=\"Webex Emulator4.png\" class=\"jive-image image-4\" src=\"https://communities.cisco.com/servlet/JiveServlet/downloadImage/38-9801-116807/475-335/Webex+Emulator4.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 100%; width: 475.37px; display: block; margin-left: auto; margin-right: auto;\" width=\"475\" height=\"335\"></a></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">This response contains two objects:</p><ol style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; caret-color: rgb(51, 51, 51); color: rgb(51, 51, 51); font-family: &quot;Cisco Sans Extra Light&quot;, sans-serif; font-size: 16px; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">A testFrameworkResponse which is the emulator’s original response to our POST to the /messages endpoint</li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">An array of botResponses, which show us the requests that the bot made in response to our test input.&nbsp; In this case, our bot made a POST to the /messages endpoint with the text “OK.&nbsp; I know when I’m not wanted…”.&nbsp; It then made a DELETE call to the memberships API and deleted its membership in the space, effectively leaving the room.</li></ol><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Finally, notice the “Test Results” circled in the image above.&nbsp; For each step in our test suite, we created<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"http://blog.getpostman.com/2017/10/25/writing-tests-in-postman/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Postman test cases</a><span class=\"Apple-converted-space\">&nbsp;</span>to validate that the API response was as expected, and when appropriate, that the bot responded as expected as well.&nbsp; We won’t delve too deeply into how these tests work, but a full set of example postman tests, including the test cases are provided in the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/jpjpjp/bot-test-framework-example\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">bot-test-framework-example</a>.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">While there are a lot of moving parts here to make this work, we think it can ultimately speed up your bot development process.&nbsp; I’ve been using this for a few months now and the regression tests have helped me discover bugs in my bots that I would have depended on users finding for me without it.&nbsp; I also love being able to work on a bot while on an airplane with sketchy internet connectivity!<span class=\"Apple-converted-space\">&nbsp;</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">If you decide to give the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/webex/webex-api-emulator\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Webex API Emulator</a><span class=\"Apple-converted-space\">&nbsp;</span>and<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/jpjpjp/bot-test-framework-example\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">bot-test-framework-example</a><span class=\"Apple-converted-space\">&nbsp;</span>a try, we’d love to hear how it goes. git<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://eurl.io/#HyfEkmq2f\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Join the Ask Webex API Emulator space</a><span class=\"Apple-converted-space\">&nbsp;</span>on Webex Teams and give us feedback.&nbsp; Right now this is just another Webex API developer community supported project, and we hope this post makes it clear that tools like this only happen with an active and engaged developer community who make contributions like<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/SteveSfartz\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Stève</a>,<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/valgaze\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Victor</a><span class=\"Apple-converted-space\">&nbsp;</span>and<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/nmarus\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Nick</a><span class=\"Apple-converted-space\">&nbsp;</span>have done.&nbsp; Who knows though, if usage of the emulator really takes off, we may someday be able to turn it into a full fledged service provided by Cisco.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Let us know what you think!</p>',NULL,'Webex+Emulator1.png-Webex+Emulator2.png-Webex+Emulator3.png-Webex+Emulator4.png','superadmin'),(106,'Upcoming Bot Username Changes','Niall Murphy','Cisco Spark','2018-07-17 22:37:31','Webex Teams',1,'		\r\n		<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Following the rebranding of<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://developer.webex.com/blog/blog-details-9738.html\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Cisco Spark to Cisco Webex Teams</a>, all newly created bots will now be given a domain of webex.bot. Existing bots, which use the sparkbot.io domain, will remain unchanged until August 31, 2018. However if you, as a bot developer, would like to update the domain to webex.bot before then, you now have that option when you select a bot on the My Webex Teams Apps page.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">There are a few things that you will want to consider when deciding when to update your bot\'s domain. Remember, the bot\'s address (username and domain) is the identifier that you give to your customers so that they can open a&nbsp; 1-to-1 space with your bot or add it to a group space. When you change the domain, you will need to update all of the places where you externally advertise the bot\'s address.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">When the address changes, all existing space memberships remain unchanged; the bot is still a member of any spaces previous to the domain change. In this respect, it is like changing the bot\'s avatar. Similar to avatar changes, the Webex Teams clients may not reflect the address change for several days. This will not prevent your users from communicating with the bot. New users will only ever see the new address and will not be aware that there ever was an address with @sparkbot.io.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><span style=\"box-sizing: border-box;\">Before changing the domain, you will want to ensure that your bot will behave correctly with the new name. One useful precaution is to search your codebase for the string \'sparkbot.io\'. If it appears anywhere in your code then that code is going to misbehave when the address of your bot changes from<span class=\"Apple-converted-space\">&nbsp;</span></span><a class=\"jive-link-email-small\" href=\"mailto:mybot@sparkbot.io\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">mybot@sparkbot.io</a><span style=\"box-sizing: border-box;\"><span class=\"Apple-converted-space\">&nbsp;</span>to mybot@webex.bot. Your code might be checking the<span class=\"Apple-converted-space\">&nbsp;</span></span><strong style=\"box-sizing: border-box; font-weight: bold;\">personEmail</strong><span class=\"Apple-converted-space\">&nbsp;</span>field of the message sender to see if it is from your own bot. This is useful if you want to avoid replying to your own messages. One way to fix this is to change the code to use the new address: mybot@webex.bot. However, a better fix is to stop using the bot\'s address completely. Instead, check the<span class=\"Apple-converted-space\">&nbsp;</span><strong style=\"box-sizing: border-box; font-weight: bold;\">personId</strong><span class=\"Apple-converted-space\">&nbsp;</span>of the sender against your bot\'s<span class=\"Apple-converted-space\">&nbsp;</span><strong style=\"box-sizing: border-box; font-weight: bold;\">personId</strong>. While a bot\'s address can change, the<span class=\"Apple-converted-space\">&nbsp;</span><strong style=\"box-sizing: border-box; font-weight: bold;\">personId</strong>cannot, so your code will survive any future domain or username changes.<span class=\"Apple-converted-space\">&nbsp;</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><span style=\"box-sizing: border-box;\">We will support bots with @sparkbot.io addresses until August 31, 2018. After that time, all bots will be migrated to the webex.bot domain. All new bots created on the Webex for Developers portal will use the new @webex.bot domain. If you try to create a new bot with a matching username, it will be refused. For example, if you own<span class=\"Apple-converted-space\">&nbsp;</span></span><a class=\"jive-link-email-small\" href=\"mailto:mybot@sparkbot.io\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">mybot@sparkbot.io</a><span style=\"box-sizing: border-box;\"><span class=\"Apple-converted-space\">&nbsp;</span>then it will not be possible for anyone to create a bot with the address mybot@webex.bot.<span class=\"Apple-converted-space\">&nbsp;</span></span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">If you have any questions about this change, our<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://developer.webex.com/support.html\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Webex Developer Support Team</a><span class=\"Apple-converted-space\">&nbsp;</span>is available 24/7 to help. Please contact them with your concern.<span class=\"Apple-converted-space\">&nbsp;</span></p><br class=\"Apple-interchange-newline\">',NULL,'','superadmin'),(107,'Optimizing Webex Bot Development with the Webex API Emulator','JP Shipherd','Administration','2018-07-22 17:43:40','',1,'		\r\n		<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Do you develop bots for<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://www.webex.com/products/teams/index.html\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Cisco Webex Teams</a><span class=\"Apple-converted-space\">&nbsp;</span>(formerly Cisco Spark)?&nbsp; Do you ever wish that there was a way to create a set of regression tests to ensure that your bot behaves consistently given the same input?&nbsp; Or maybe you wish that there was a way to speed up your iterative development/debug process when you are working on a bot response to a complex set of input?&nbsp; Or perhaps, you just wished you could do some bot development work when you were in a place that didn’t have good internet connectivity?</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">If so, I’m happy to let you know that the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/webex/webex-api-emulator\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Webex API Emulator</a>, originally created by<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/SteveSfartz\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Stève Sfartz</a>, API Evangelist at Cisco DevNet, can help make your wishes come true.&nbsp; The emulator is a simple node.js project which you can download from GitHub and run locally.&nbsp; It loads a tokens.json configuration file that tells it about the users that can interact with it.&nbsp; This file, which is editable by you, allows you to create “authorization tokens” and “personIds” for your bot, your tester and any other “people” that might be added to spaces as part of your tests.&nbsp;&nbsp; Think of it as your own, local, common identity server.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Let’s start making those wishes come true by dealing with the last wish first, the idea of doing bot development when you are offline.&nbsp; Once the emulator is up and running you can use a tool like<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://www.getpostman.com/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Postman</a><span class=\"Apple-converted-space\">&nbsp;</span>to send requests to the Webex API Emulator to do things like create spaces, add a user (or bot) to a space, or post a message to the space.&nbsp; The emulator also supports the webhooks API so if you configure your bot to talk to your locally running instance of the emulator, your bot will get notified when it is added to a space or when a message is sent to it.&nbsp; Once you can can send a message to your bot via the emulator,&nbsp; you can open up your favorite editor or debugger, and you can start stepping through your bot’s responses to these commands, building and debugging responses to these inputs, all without an internet connection.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">We’ve glossed over a few things here, but we’ll get back to it.&nbsp; Assume you are now able to send commands to your bot via Postman and see the Webex API requests that your bot makes in response, all offline.&nbsp; Handy for working offline, right?&nbsp; But once you get used to this, you may start to realize that running in this mode simplifies your development motion even when you DO have an internet connection.&nbsp; Imagine your bot needs to have a particular response in certain specific, potentially complex, circumstances.&nbsp; For example if you send your bot a message like “who from my company is in this room”,&nbsp; you might want it to list people from your company but also be sure that it skips people from other companies.&nbsp; You’d want to make sure that the bot behaves properly in circumstances where there are no people from your company, some people from your company, no people from other companies and some people from other companies.&nbsp; To test this you’d ideally create a several spaces and add several combinations of people to each of those space, and then type in your requests in all those spaces.&nbsp; Doing this manually in the Webex Teams app can be time consuming and it might not make your test subjects very happy to keep getting added to different spaces as you test different variations!</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">With Postman and the emulator, you can make the API calls to create the spaces, others to add each of the users, and another set to send in the commands.&nbsp; These can then be saved in<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://www.getpostman.com/docs/v6/postman/collections/creating_collections\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">a postman collection</a><span class=\"Apple-converted-space\">&nbsp;</span>and run with a couple of keystrokes.&nbsp; Your bot didn’t respond as you expected?&nbsp; Simply stop the emulator and your bot and restart them (in that order!).&nbsp; This brings you back to a pristine environment where no spaces have been created yet.&nbsp; Alternately, have another set of commands to delete the spaces and run your test again as often as you like, until it works perfectly for all the variations that you care to test for!</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Hmm, as we start building up these sets of API calls to emulate user input that we want our bot to respond to, we are starting to get close to what some might call a regression test.&nbsp; There is still one problem though, a true regression test should also validate the responses from your bot.&nbsp; Luckily the Webex API Emulator also supports “bot test mode”.&nbsp; In this mode we can instruct the emulator to look for bot responses to certain input and provide that back in its responses to us.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">In order to better understand how bot test mode works we’ve created a<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/jpjpjp/bot-test-framework-example\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">bot-test-framework-example</a><span class=\"Apple-converted-space\">&nbsp;</span>to demonstrate a set of tests in action.&nbsp; It includes a link to the Webex API Emulator project, a sample bot, a full collection of Postman tests and a detailed set of instructions to help you get this going.&nbsp; Since the Webex API emulator is written in javascript we chose a<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/valgaze/sparkbotstarter\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">node.js sparkbotstarter project</a><span class=\"Apple-converted-space\">&nbsp;</span>originally written by<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/valgaze\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Victor Algaze</a>, based on the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/flint-bot/flint\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">node-flint framework</a><span class=\"Apple-converted-space\">&nbsp;</span>created by<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/nmarus\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Nick Marus</a>.&nbsp; We hope to add some bots built with python in the future.&nbsp; The emulator doesn’t care about your framework, but you DO need to be able to configure the Webex API endpoint that your bot sends requests to.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Now, let’s get a flavor for how bot test mode works.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Before we could run any tests we needed to start our Webex API Emulator in “bot test mode” and start our bot using an API token specified in the emulator’s tokens.json file.&nbsp;&nbsp; When we’ve got the the emulator and our bot running properly we’ll have some terminal windows that look something like this:</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><a href=\"https://communities.cisco.com/servlet/JiveServlet/showImage/38-9801-116804/Webex+Emulator1.png\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\"><img alt=\"Webex Emulator1.png\" class=\"image-1 jive-image\" src=\"https://communities.cisco.com/servlet/JiveServlet/downloadImage/38-9801-116804/353-364/Webex+Emulator1.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 100%; height: 364.193px; width: 353px; display: block; margin-left: auto; margin-right: auto;\" width=\"353\" height=\"364\"></a></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Once those services are running we can start sending in our test input.&nbsp; The first couple of test cases don’t generate any bot reaction, they simply set our state.</p><ol style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; caret-color: rgb(51, 51, 51); color: rgb(51, 51, 51); font-family: &quot;Cisco Sans Extra Light&quot;, sans-serif; font-size: 16px; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">We create a new space via a POST to the /rooms API and store the roomId in a postman environment variable called “_room”.</li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">We then add our bot to the space via a POST the /memberships API.</li></ol><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Now we are ready to send a message to the bot and check if it responds as we expect.&nbsp; Here’s what that request looks like in postman:</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><a href=\"https://communities.cisco.com/servlet/JiveServlet/showImage/38-9801-116805/Webex+Emulator2.png\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\"><img alt=\"Webex Emulator2.png\" class=\"jive-image image-2\" src=\"https://communities.cisco.com/servlet/JiveServlet/downloadImage/38-9801-116805/348-148/Webex+Emulator2.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 100%; height: 147.793px; width: 348px; display: block; margin-left: auto; margin-right: auto;\" width=\"348\" height=\"148\"></a></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">This is a fairly standard POST to the /messages endpoint with a body which specifies the roomId of the previously created space (stored in a postman environment variable), and includes some markdown which mentions our bot and sends the command “/leave”.&nbsp; (Note that all of the environment variables used in these test cases are explained in more detail in the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/jpjpjp/bot-test-framework-example\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">bot-test-framework-example</a><span class=\"Apple-converted-space\">&nbsp;</span>readme).&nbsp; Now let’s look at what makes this request a true “regression test”.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Here are the headers for this request:</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><a href=\"https://communities.cisco.com/servlet/JiveServlet/showImage/38-9801-116806/Webex+Emulator3.png\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\"><img alt=\"Webex Emulator3.png\" class=\"jive-image image-3\" src=\"https://communities.cisco.com/servlet/JiveServlet/downloadImage/38-9801-116806/362-146/Webex+Emulator3.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 100%; height: 145.566px; width: 362px; display: block; margin-left: auto; margin-right: auto;\" width=\"362\" height=\"146\"></a></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">The Authorization and Content-Type headers should look familiar to anyone who has used postman to send requests to the Webex API, but there is a new header “X-Bot-Responses” as well.&nbsp; When the emulator sees a request with this header, it understands that we expect the bot under test to make two subsequent requests in response to this command.&nbsp; It will “intercept” the original response to this request and “hold” it until it gets the two bot requests and then build out a consolidated response that looks something like this:</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><a href=\"https://communities.cisco.com/servlet/JiveServlet/showImage/38-9801-116807/Webex+Emulator4.png\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\"><img alt=\"Webex Emulator4.png\" class=\"jive-image image-4\" src=\"https://communities.cisco.com/servlet/JiveServlet/downloadImage/38-9801-116807/475-335/Webex+Emulator4.png\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; max-width: 100%; width: 475.37px; display: block; margin-left: auto; margin-right: auto;\" width=\"475\" height=\"335\"></a></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">This response contains two objects:</p><ol style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; caret-color: rgb(51, 51, 51); color: rgb(51, 51, 51); font-family: &quot;Cisco Sans Extra Light&quot;, sans-serif; font-size: 16px; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\"><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">A testFrameworkResponse which is the emulator’s original response to our POST to the /messages endpoint</li><li style=\"box-sizing: border-box; margin-top: 0px; font-size: 1rem; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;;\">An array of botResponses, which show us the requests that the bot made in response to our test input.&nbsp; In this case, our bot made a POST to the /messages endpoint with the text “OK.&nbsp; I know when I’m not wanted…”.&nbsp; It then made a DELETE call to the memberships API and deleted its membership in the space, effectively leaving the room.</li></ol><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Finally, notice the “Test Results” circled in the image above.&nbsp; For each step in our test suite, we created<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"http://blog.getpostman.com/2017/10/25/writing-tests-in-postman/\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Postman test cases</a><span class=\"Apple-converted-space\">&nbsp;</span>to validate that the API response was as expected, and when appropriate, that the bot responded as expected as well.&nbsp; We won’t delve too deeply into how these tests work, but a full set of example postman tests, including the test cases are provided in the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/jpjpjp/bot-test-framework-example\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">bot-test-framework-example</a>.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">While there are a lot of moving parts here to make this work, we think it can ultimately speed up your bot development process.&nbsp; I’ve been using this for a few months now and the regression tests have helped me discover bugs in my bots that I would have depended on users finding for me without it.&nbsp; I also love being able to work on a bot while on an airplane with sketchy internet connectivity!<span class=\"Apple-converted-space\">&nbsp;</span></p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">If you decide to give the<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/webex/webex-api-emulator\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Webex API Emulator</a><span class=\"Apple-converted-space\">&nbsp;</span>and<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://github.com/jpjpjp/bot-test-framework-example\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">bot-test-framework-example</a><span class=\"Apple-converted-space\">&nbsp;</span>a try, we’d love to hear how it goes. git<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://eurl.io/#HyfEkmq2f\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Join the Ask Webex API Emulator space</a><span class=\"Apple-converted-space\">&nbsp;</span>on Webex Teams and give us feedback.&nbsp; Right now this is just another Webex API developer community supported project, and we hope this post makes it clear that tools like this only happen with an active and engaged developer community who make contributions like<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/SteveSfartz\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Stève</a>,<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/valgaze\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Victor</a><span class=\"Apple-converted-space\">&nbsp;</span>and<span class=\"Apple-converted-space\">&nbsp;</span><a class=\"jive-link-external-small\" href=\"https://twitter.com/nmarus\" rel=\"nofollow\" target=\"_blank\" style=\"box-sizing: border-box; background-color: transparent; color: rgb(5, 161, 191); text-decoration: none; outline: none; font-size: 1rem; font-family: &quot;CiscoSans TT Light&quot;; margin-top: 20px;\">Nick</a><span class=\"Apple-converted-space\">&nbsp;</span>have done.&nbsp; Who knows though, if usage of the emulator really takes off, we may someday be able to turn it into a full fledged service provided by Cisco.</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 16px; line-height: 1.5rem; color: rgb(106, 107, 108); font-family: &quot;CiscoSans TT Light&quot;; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;\">Let us know what you think!</p>',NULL,'Webex+Emulator1.png-Webex+Emulator2.png-Webex+Emulator3.png-Webex+Emulator4.png','superadmin'),(112,'test Upcoming Bot Username Changes','Adam Kong','Cisco Spark','2018-08-01 11:41:19','Bot,Username,Changes',1,'<p>test Upcoming Bot Username Changes<br></p>',NULL,'','superadmin'),(114,'I’m happy','I’m happy','Cisco Spark','2018-08-12 09:34:05','I’m happy',1,'<p>I‘m happy<br></p>',NULL,'','superadmin'),(115,'Involvio Now on the Cisco GPL','Francis Geck','Meetings','2018-08-12 13:53:40','',1,'<div class=\"jive-rendered-content\"><p><a class=\"jive-link-external-small\" href=\"https://involvio.com/\" rel=\"nofollow\" target=\"_blank\">Involvio</a> is now on the Cisco GPL with an annuity offering and available for transactions by any Cisco sellers/resellers.</p><p><a href=\"https://community.cisco.com/legacyfs/online/fusion/119389_involvio.png\"><img alt=\"involvio.png\" class=\"image-1 jive-image\" src=\"https://community.cisco.com/legacyfs/online/fusion/119389_involvio.png\" style=\"height: 83.6755px; display: block; margin-left: auto; margin-right: auto; width:266px;\" width=\"266\" height=\"84\"></a></p><p>Involvio is a <a class=\"jive-link-external-small\" href=\"https://www.webex.com/products/teams/index.html\" rel=\"nofollow\" target=\"_blank\">Cisco Webex Teams</a>\r\n Integrator focused on the higher education market with an innovative \r\noffering that addresses student engagement and retention. This is the \r\nbig question for higher education: <em>Are students engaged?</em> If \r\nnot, what actions can be taken to keep them on track? Cisco \r\nCollaboration provides that critical communication channel between \r\nstudents and administration.</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p><span>Welcome to the Cisco price list. To get engaged with Involvio reach out at www.involvio.com or </span><a class=\"jive-link-email-small\" href=\"mailto:hello@involvio.com\">hello@involvio.com</a><span>.</span></p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>-- <strong>Frank Geck</strong>, Cisco Webex Solution Partners Business Development Manager</p></div>','2018-10-04 09:41:05','119389_involvio.png','superadmin'),(116,'Local Measure Now on the Cisco GPL','Francis Geck','Meetings','2018-08-12 13:54:35','',1,'<div class=\"jive-rendered-content\"><p><a class=\"jive-link-external-small\" href=\"https://www.localmeasure.com/\" rel=\"nofollow\" target=\"_blank\">Local Measure</a> is on Cisco\'s Global Price List and available for transactions by any Cisco sellers/resellers.</p><p><a href=\"https://community.cisco.com/legacyfs/online/fusion/118539_local_measure_high.png\"><img alt=\"local_measure_high.png\" class=\"image-1 jive-image\" src=\"https://community.cisco.com/legacyfs/online/fusion/118539_local_measure_high.png\" style=\" width: 417.083px; display: block; margin-left: auto; margin-right: auto;\" width=\"417\" height=\"55\"></a></p><p>Local\r\n Measure provides a retail and hospitality service that connects the \r\nfront line staff to customers and customer feedback.  Local Measure \r\ncombines social analytics, local based activity, and customer history to\r\n generate valuable business actions. Cisco Collaboration provides the \r\ncritical communication channel for real time actions by company team \r\nmembers.  Integration with Cisco Meraki is also a plus.  Current \r\ncustomers include Sea World, Orange, Virgin Hotels, and Quantas.</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>Welcome to the price list! <span style=\"font-size: 10pt;\">To get engaged with Local Measure, reach out at: <a class=\"jive-link-external-small\" href=\"https://www.localmeasure.com/company/partners/cisco\" rel=\"nofollow\" target=\"_blank\">www.localmeasure.com</a>. And be sure to check out their integration with Webex Teams on the <a class=\"jive-link-external-small\" href=\"https://apphub.webex.com/integrations/local-measure-local-measure\" rel=\"nofollow\" target=\"_blank\">Webex App Hub</a>. </span></p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>-- <strong>Frank Geck</strong>, Cisco Webex Solution Partners Business Development Manager</p></div>','2018-10-04 09:40:55','118539_local_measure_high.png','superadmin'),(117,'Oblong Takes Cisco Hollywood','Francis Geck','Meetings','2018-08-12 13:55:40','Hollywood credit',1,'<div class=\"jive-rendered-content\"><p>It\'s not often that Cisco can claim Hollywood credit, but we can claim something better - we are bringing Hollywood to life.</p><p><a href=\"https://community.cisco.com/legacyfs/online/fusion/117820_oblonglogo.png\"><img alt=\"oblonglogo.png\" class=\"image-1 jive-image\" src=\"https://community.cisco.com/legacyfs/online/fusion/117820_oblonglogo.png\" style=\"height: 120.609px; display: block; margin-left: auto; margin-right: auto; width:219px;\" width=\"219\" height=\"121\"></a></p><p><a class=\"jive-link-external-small\" href=\"https://www.oblong.com/cisco/\" rel=\"nofollow\" target=\"_blank\">Oblong Industries</a>, a Cisco solution partner, was founded by the man that Hollywood turns to for envisioning the future of human computer interface as seen in blockbuster movies - like Minority Report, The Hulk, and Iron Man - John Underkoffler. At some point, he decided to make the futuristic concepts a reality. The best part? That reality works seamlessly with Cisco technology.</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>So what does Oblong do?</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>Oblong puts a multi-stream content layer on top of <a class=\"jive-link-external-small\" href=\"https://www.webex.com/\" rel=\"nofollow\" target=\"_blank\">Cisco Webex</a>.  Do you want to share content in a more flexible way? Do you want to make your content more interactive with multiple people sharing at once?  Do your collaborators want to see content from different sources side-by-side? Do you want your system, room, and environment to be so immersive that people can\'t help but be captivated?</p><p><a href=\"https://community.cisco.com/legacyfs/online/fusion/117821_oblong1.png\"><img alt=\"oblong1.png\" class=\"jive-image image-2\" src=\"https://community.cisco.com/legacyfs/online/fusion/117821_oblong1.png\" style=\"height: 223.277px; display: block; margin-left: auto; margin-right: auto; width:336px;\" width=\"336\" height=\"223\"></a></p><p>A really cool aspect of using Oblong is the experience in a meeting room.  When you walk into a room with <a class=\"jive-link-external-small\" href=\"https://www.oblong.com/mezzanine/features/\" rel=\"nofollow\" target=\"_blank\">Oblong\'s Mezzanine product</a>, you\'ll often see a number of large screens arrayed to form the shared, pixel-rich workspace. (You might even see screens on multiple wall surfaces.) There is a remote control called a wand that provides for gesture control of the information - while another group at some other location are also doing the same. You\'re all working together, seeing and controlling the same content at the same time.</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>For an example of the utility Mezzanine brings to projects, check out this <a class=\"jive-link-external-small\" href=\"https://vimeo.com/273378252\" rel=\"nofollow\" target=\"_blank\">short video</a> illustrating how a workflow in <a class=\"jive-link-external-small\" href=\"https://www.webex.com/products/teams/index.html\" rel=\"nofollow\" target=\"_blank\">Cisco Webex Teams</a> can jump from desktop to multi-stream Mezzanine meeting space for collaborators in multiple locations.</p><p style=\"text-align: center;\">\r\n</p><p>Or take a deeper dive, and <a class=\"jive-link-external-small\" href=\"https://vimeo.com/174223351\" rel=\"nofollow\" target=\"_blank\">go behind the scenes</a> at Oblong with Spencer Kelly of BBC Click</p><p style=\"text-align: center;\">\r\n</p><p>Behavior is driven by the tools and environment that people are in.  If you have a traditional meeting, right after lunch when people\'s blood sugar is dropping, and someone is droning on, presenting from a slide deck, people just aren\'t fully engaged.</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>Put those same people in a room with an immersive Oblong <> Cisco Webex experience - huge screens, all sharing content at the same time, engaged in discussions - <strong>it\'s exciting!</strong> </p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>It\'s like you\'re actually in the movie instead of watching one.  If you\'re interested in how Oblong can do this for your customers or at your company let us know.  Then, at your next meeting, your team might confuse you for Tony Stark.</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>And, if you\'re interested in hearing from the man himself, check out John Underkoffler\'s TED Talk on the future of <a class=\"jive-link-external-small\" href=\"https://www.youtube.com/watch?v=b6YTQJVzwlI\" rel=\"nofollow\" target=\"_blank\">Human Machine Interfaces</a>.</p><p style=\"text-align: center;\">\r\n</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>-- <strong>Frank Geck</strong>, Cisco Webex Solution Partners Business Development Manager</p></div>','2018-10-04 09:40:45','117820_oblonglogo.png---```---117821_oblong1.png','superadmin'),(118,'Using PubNub for Enterprise Bots Behind the Firewall','Adam Kalsy','Meetings','2018-08-12 13:56:48','Cisco Webex Teams Bot',1,'<div class=\"jive-rendered-content\"><p>Building Cisco Webex Teams bots \r\nand integrations that need access to behind-the-firewall resources is a \r\nchallenge that regularly faces developers building Webex applications \r\nfor internal use. Webex API events are delivered with an HTTP push model\r\n that requires your bot to be hosted on a web server that’s available on\r\n the public internet, but not all IT infrastructure allows for public \r\nweb servers. To make this easier, we\'ve worked with <a class=\"jive-link-external-small\" href=\"https://www.pubnub.com/\" rel=\"nofollow\" target=\"_blank\">PubNub</a>\r\n to create a reference architecture that allows enterprise applications \r\nto use PubNub\'s infrastructure to deploy bots and integrations behind \r\nthe firewall.</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>PubNub\r\n is a publish and subscribe service that makes it easy to deliver events\r\n to applications in real-time, across a wide variety of network \r\nconfigurations. If the application can reach the internet, it can \r\nreceive PubNub events. Today we\'re publishing a reference architecture, \r\nhelper applications, and sample code that allow you to use PubNub as a \r\ntransport to get your Webex Teams events delivered behind the firewall, \r\nto mobile clients, or wherever you need them to go.</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>This\r\n reference architecture uses PubNub as your webhook URL, and PubNub will\r\n publish all webhooks to a PubNub channel. Your application subscribes \r\nto this channel, receiving all webhooks over this channel in real time. \r\nMinimal changes are required to your application, often only requiring a\r\n few lines of code to be added.</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p><a href=\"https://community.cisco.com/legacyfs/online/fusion/117499_pubnub-architecture.png\"><img alt=\"pubnub-architecture.png\" class=\"image-1 jive-image\" src=\"https://community.cisco.com/legacyfs/online/fusion/117499_pubnub-architecture.png\" style=\"height: 302px; width: 620px;\" width=\"1272\" height=\"620\"></a></p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>We\'ve published a <a class=\"jive-link-external-small\" href=\"https://github.com/WebexSamples/pubnub-webex\" rel=\"nofollow\" target=\"_blank\">GitHub repository</a>\r\n containing sample code, instructions for implementation, and helper \r\napplications. The repository also contains a plugin for Howdy Botkit \r\nthat makes any Botkit application use PubNub.</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p><a class=\"jive-link-external-small\" href=\"https://dashboard.pubnub.com/signup?abtest=&psc=WC-Tracking&pt=wc-tracking&PN_First_Page_Visited=https%3A%2F%2Fwww.pubnub.com%2F&PN_Page_Before_Sign_Up=https://www.pubnub.com/\" rel=\"nofollow\" target=\"_blank\">Sign up for PubNub\'s free developer trial</a> and <a class=\"jive-link-external-small\" href=\"https://github.com/WebexSamples/pubnub-webex\" rel=\"nofollow\" target=\"_blank\">download the sample code</a> to get started.</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>If\r\n you\'re at Cisco Live in Orlando this week, stop by the PubNub booth in \r\nthe Investment Village inside the World of Solutions to talk about this \r\nreference architecture and many other ways you can build real-time \r\napplications with PubNub. And stop at the theater near the Investment \r\nVillage at 2:50pm on Monday June 11 to hear Webex Evangelist Phil \r\nBellanti and PubNub CEO Todd Greene talk about this architecture.</p></div>','2018-10-04 09:40:37','117499_pubnub-architecture.png','superadmin'),(119,'Cisco Webex Cloud API Development Partners at Cisco Live! Orlando','Francis Geck','Meetings','2018-08-12 13:57:50','Cisco Live',1,'<div class=\"jive-rendered-content\"><p>We are excited to have such an amazing group of development partners showcasing their solutions and platforms at <a class=\"jive-link-external-small\" href=\"https://www.ciscolive.com/us/\" rel=\"nofollow\" target=\"_blank\">Cisco Live! Orlando</a> from June 11th through June 14th.  We are including a snapshot of our Webex Teams API partners who will be attending.</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>If\r\n you\'re going, please stop by, say hello, get a demo, and find out how \r\nthey can add value to your business.  And, if you\'d like to connect with\r\n them before the show please reach out directly or through us. </p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>Make sure to print this out before you go!</p><p><a href=\"https://community.cisco.com/legacyfs/online/fusion/117345_clusisvs.png\"><img alt=\"clusisvs.png\" class=\"image-1 jive-image\" src=\"https://community.cisco.com/legacyfs/online/fusion/117345_clusisvs.png\" style=\"height: 204.373px; width:361px; display: block; margin-left: auto; margin-right: auto;\" width=\"361\" height=\"204\"></a></p><p><a class=\"jive-link-external-small\" href=\"https://m.io/\" rel=\"nofollow\" target=\"_blank\"><strong>M.io</strong></a> - in the Cisco Live! Collaboration Village</p><p style=\"padding-left: 30px;\">Unified team chat for Webex Teams and Slack </p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p><strong><a class=\"jive-link-external-small\" href=\"https://dynamicsignal.com/\" rel=\"nofollow\" target=\"_blank\">Dynamic Signal </a></strong><span style=\"font-size: 13.3333px;\">- in the Cisco Live! Collaboration Village</span></p><p style=\"padding-left: 30px;\">Connect with your most valuable assets. Your Employees. </p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p><a class=\"jive-link-external-small\" href=\"https://vbrick.com/\" rel=\"nofollow\" target=\"_blank\"><strong>Vbrick</strong></a> - booth # 1667 </p><p style=\"padding-left: 30px;\"><span style=\"font-size: 10pt;\">Enterprise Video.  Like you\'ve never seen it!</span></p><p><span style=\"font-size: 10pt;\"><br></span></p><p><span style=\"font-size: 10pt;\"><a class=\"jive-link-external-small\" href=\"https://www.oblong.com/\" rel=\"nofollow\" target=\"_blank\"><strong>Oblong</strong></a><span style=\"font-size: 13.3333px;\"> - in the Cisco Live! Collaboration Village</span> </span></p><p style=\"padding-left: 30px;\"><span style=\"font-size: 10pt;\">Multi-stream content on top of Webex </span></p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p><span style=\"font-size: 10pt;\"><strong><a class=\"jive-link-external-small\" href=\"https://www.vyopta.com/\" rel=\"nofollow\" target=\"_blank\">Vyopta</a></strong><span style=\"font-size: 13.3333px;\"> - in the Cisco Live! Collaboration Village</span> </span></p><p style=\"padding-left: 30px;\"><span style=\"font-size: 10pt;\">Unified Communications and Collaboration Performance Management</span></p><p><span style=\"font-size: 10pt;\"><br></span></p><p><span style=\"font-size: 10pt;\"><strong><a class=\"jive-link-external-small\" href=\"https://www.actiance.com/\" rel=\"nofollow\" target=\"_blank\">Actiance</a></strong><span style=\"font-size: 13.3333px;\"> - in the Cisco Live! Collaboration Village</span> </span></p><p style=\"padding-left: 30px;\"><span style=\"font-size: 10pt;\">Redefining Archiving for Compliance</span></p><p><span style=\"font-size: 10pt;\"><br></span></p><p><span style=\"font-size: 10pt;\"><strong><a class=\"jive-link-external-small\" href=\"https://www.singlewire.com/\" rel=\"nofollow\" target=\"_blank\">Singlewire</a></strong> - booth # 1646</span></p><p style=\"padding-left: 30px;\"><span style=\"font-size: 10pt;\">Emergency Notification with Informacast</span></p><p><span style=\"font-size: 10pt;\"><br></span></p><p><span style=\"font-size: 10pt;\"><strong><a class=\"jive-link-external-small\" href=\"https://www.pega.com/\" rel=\"nofollow\" target=\"_blank\">Pega</a></strong><span style=\"font-size: 13.3333px;\"> - in the Cisco Live! Collaboration Village</span> </span></p><p style=\"padding-left: 30px;\"><span style=\"font-size: 10pt;\">Customer engagement. </span><span style=\"font-size: 10pt;\">Digital Process Automation.</span></p><p><span style=\"font-size: 10pt;\"><br></span></p><p><span style=\"font-size: 10pt;\">See you there!<br></span></p><p><span style=\"font-size: 10pt;\">- <a class=\"jive-link-email-small\" href=\"mailto:fgeck@cisco.com\">Frank Geck</a> & the Webex ISV BD Team </span></p></div>','2018-10-04 09:40:29','117345_clusisvs.png','superadmin'),(120,'M.io Lets You Talk Across Apps, Including Cisco Webex Teams','Francis Geck','Cisco Spark','2018-08-12 13:58:33','',1,'<div class=\"jive-rendered-content\"><p><em>--&nbsp; This post is co-authored by <strong>Chris Traganos</strong>, VP Product of M.io &amp; <strong>Frank Geck</strong>, Business Development Manager of Cisco --</em></p><p><a href=\"https://community.cisco.com/legacyfs/online/fusion/117183_mio1.png\"><img alt=\"mio1.png\" class=\"jive-image image-3\" src=\"https://community.cisco.com/legacyfs/online/fusion/117183_mio1.png\" style=\" width: 253.092px; display: block; margin-left: auto; margin-right: auto;\" width=\"253\" height=\"169\"></a></p><p>Sounds\r\n simple right?&nbsp; In the last few years collaboration, specifically \r\nmessaging and video solutions have proliferated across both consumer and\r\n enterprise customers.&nbsp; They are becoming easier to deploy and often out\r\n of the control of IT and InfoSec departments.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>Some\r\n teams are sending WhatsApp messages with critical business information \r\nand others are using Cisco Webex Teams or even Slack.&nbsp; We often run into\r\n sales situations where a Fortune 500 customer is interested in a \r\ncorporate rollout of <a class=\"jive-link-external-small\" href=\"https://www.webex.com/products/teams/index.html\" rel=\"nofollow\" target=\"_blank\">Cisco Webex Teams</a> but during the sales process the customer discovers several groups using Slack, and they aren\'t interested in switching.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>That\'s where <a class=\"jive-link-external-small\" href=\"https://m.io/\" rel=\"nofollow\" target=\"_blank\">M.io</a> comes in.</p><p><a href=\"https://community.cisco.com/legacyfs/online/fusion/117181_mio2.png\"><img alt=\"mio2.png\" class=\"image-1 jive-image\" src=\"https://community.cisco.com/legacyfs/online/fusion/117181_mio2.png\" style=\"margin-right: auto; margin-left: auto; font-size: 13.3333px;  width: 246.1px; display: block;\" width=\"247\" height=\"138\"></a></p><p>M.io\r\n is a Silicon Valley startup that just moved to my home city of Austin, \r\nTexas (the Live Music Capital of the World) and they understand \r\ncollaboration platforms and the collaboration API\'s better than just \r\nabout anyone.&nbsp;&nbsp; And they\'ve created an amazing product that federates \r\nbetween these platforms that is seamless to users.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>Does your product marketing team want to use <a class=\"jive-link-external-small\" href=\"https://www.webex.com/products/devices/index.html\" rel=\"nofollow\" target=\"_blank\">Cisco Webex Boards</a>\r\n so they can digitally whiteboard from remote locations and then \r\ncommunicate that information to the Engineering team where everyone\'s \r\nnot on <a class=\"jive-link-external-small\" href=\"https://www.webex.com/products/teams/index.html\" rel=\"nofollow\" target=\"_blank\">Webex Teams</a> but some are on Slack?&nbsp; No problem.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><div style=\"padding: 56.25% 0 0 0; position: relative;\"> \r\n\r\n\r\n</div><p style=\"text-align: center;\"><a class=\"jive-link-external-small\" href=\"https://vimeo.com/271170116\" rel=\"nofollow\" target=\"_blank\">Webex Teams &amp; Slack Interoperability</a> from <a class=\"jive-link-external-small\" href=\"https://vimeo.com/messageio\" rel=\"nofollow\" target=\"_blank\">Message.io</a> on <a class=\"jive-link-external-small\" href=\"https://vimeo.com/\" rel=\"nofollow\" target=\"_blank\">Vimeo</a>.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>Solving\r\n this problem is harder than one might think at first.&nbsp; Sure, just do \r\nsome API mapping and create bridge functions between the two.&nbsp; Not so \r\nsimple.&nbsp; M.io has had to consider the security and scale that comes \r\nalong with the <a class=\"jive-link-external-small\" href=\"https://www.webex.com/products/teams/index.html\" rel=\"nofollow\" target=\"_blank\">Cisco Webex Teams</a> platform.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>We\'re\r\n thrilled about this solution for many reasons.&nbsp; First, we\'ve been \r\nspending a ton of time focusing on our core products and love the fact \r\nthat a third-party development partner has solved this extremely hard \r\nproblem with us.&nbsp; Second, it\'s really a sign that our <a class=\"jive-link-external-small\" href=\"https://developer.webex.com/index.html\" rel=\"nofollow\" target=\"_blank\">Webex for Developers</a>\r\n program is going in the right direction.&nbsp; This interoperability is hard\r\n so our open API\'s have been able to help deliver on a complex problem \r\nlike this.</p><p><a href=\"https://community.cisco.com/legacyfs/online/fusion/117182_mio3.png\"><img alt=\"mio3.png\" class=\"jive-image image-2\" src=\"https://community.cisco.com/legacyfs/online/fusion/117182_mio3.png\" style=\" width: 372.542px; display: block; margin-left: auto; margin-right: auto;\" width=\"373\" height=\"210\"></a></p><p>And,\r\n for the market, this is a sign of where we are going as a company.&nbsp; We \r\nrecognize that companies are going to have mixed environments and we\'re \r\nworking to support seamless experiences - not just with our own products\r\n - but across an enterprise\'s complex mix of technology platforms.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>M.io\r\n is making it easy for us to all talk to one another.&nbsp; Imagine all the \r\ngood things that are going to come from that.&nbsp; We care about bringing \r\ninteroperability to you!</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p><strong>Next Steps -- </strong><span style=\"font-size: 10pt;\">For more information reach out to </span><a class=\"jive-link-external-small\" href=\"https://m.io/\" rel=\"nofollow\" target=\"_blank\">M.io</a><span style=\"font-size: 10pt;\"> directly online or follow up with Frank Geck on </span><a class=\"jive-link-external-small\" href=\"https://www.webex.com/products/teams/index.html\" rel=\"nofollow\" target=\"_blank\">Webex Teams</a><span style=\"font-size: 10pt;\"><span> using </span><a class=\"jive-link-email-small\" href=\"mailto:fgeck@cisco.com\">fgeck@cisco.com</a><span>. </span></span></p></div>',NULL,'117183_mio1.png-117181_mio2.png-117182_mio3.png','superadmin'),(121,'Cisco Webex Teams and Appspace Help Optimize Digital Real Estate','Francis Geck','Meetings','2018-08-12 14:02:26','',1,'<div class=\"jive-rendered-content\"><p>I recently visited a tech company \r\nin Austin. Entered the lobby, checked in, was told that my contact was \r\nrunning late, and was asked, could I \"please take a seat and wait?\" \r\n\"Okay, sure.\" After sitting down on a modern-esque  chair-you know, the \r\nkind you\'d expect to see in a tech company-I\'m surprised the flat panel \r\non the wall isn\'t playing \'Squawk on the Street.\'</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>Instead,\r\n the screen is displaying rotating pictures of various company events - a\r\n hike in a green space, some holiday dinners/gatherings, etc.  The \r\nimages segue to some screen captures of news about the company, \r\nincluding a new partnership they just signed, and then some customer \r\nlogos. Then the system plays a video about the company\'s product line \r\nfor the healthcare market.</p><p><a href=\"https://community.cisco.com/legacyfs/online/fusion/116930_Appspace%201.png\"><img alt=\"Appspace 1.png\" class=\"jive-image image-2\" src=\"https://community.cisco.com/legacyfs/online/fusion/116930_Appspace%201.png\" style=\"height: 226px; display: block; margin-left: auto; margin-right: auto; width: 226px;\" width=\"226\" height=\"226\"></a></p><p>At\r\n the end of my wait, I couldn\'t help but think that waiting in a lobby \r\nis usually pretty boring but in this case it was actually really cool.  \r\nIn just five minutes, I got this overview of the company, its employees,\r\n including a sense of what it felt like working there, and some great \r\nnews highlights about the company. When it was time for my meeting, I \r\nwas able to  ask a few questions based on that content to help \'break \r\nthe ice,\' get the meeting started, and make everyone feel comfortable \r\nright off the bat. Loved it.</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>That corporate messaging is all managed by a Cisco Webex Teams Integration Partner called <a class=\"jive-link-external-small\" href=\"https://www.appspace.com/\" rel=\"nofollow\" target=\"_blank\">Appspace</a>. \r\n And they do it extremely well.  Companies can create their own digital \r\nchannels - with all kinds of content, including pictures, videos, etc. -\r\n and play them back on hundreds of displays in offices around the world.\r\n </p><p><a href=\"https://community.cisco.com/legacyfs/online/fusion/116931_appspace.png\"><img alt=\"appspace.png\" class=\"jive-image image-3\" src=\"https://community.cisco.com/legacyfs/online/fusion/116931_appspace.png\" style=\"height: 22.9597px; width:195px; display: block; margin-left: auto; margin-right: auto;\" width=\"195\" height=\"23\"></a></p><p><a class=\"jive-link-external-small\" href=\"https://www.appspace.com/\" rel=\"nofollow\" target=\"_blank\">Appspace</a>\r\n has a philosophy that there should never be a blank screen.  In this \r\ncase, the screens they are referring to are Cisco endpoints - Room Kits,\r\n DX80\'s, and Cisco Webex Boards.  Of course, many large enterprises have\r\n these devices installed. Appspace turns these devices into a rich \r\ninternal and external (i.e., for visitors) communications channel. </p><p><a href=\"https://community.cisco.com/legacyfs/online/fusion/116932_Appspace%202.png\"><img alt=\"Appspace 2.png\" class=\"jive-image image-4\" src=\"https://community.cisco.com/legacyfs/online/fusion/116932_Appspace%202.png\" style=\"height: 227px; width: 227px; display: block; margin-left: auto; margin-right: auto;\" width=\"227\" height=\"227\"></a></p><p>I love partners who enhance Cisco products like <a class=\"jive-link-external-small\" href=\"https://www.webex.com/products/teams/index.html\" rel=\"nofollow\" target=\"_blank\">Cisco Webex Teams</a>\r\n (formerly Cisco Spark) by adding useful features and thereby adding \r\ntremendous value.  It\'s mainly because I love the creativity-seeing \r\ninnovative integrations like Appspace.</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>Appspace\r\n has certainly embraced Webex Teams. With Appspace, the various digital \r\nchannels you create are not limited to playback on large format \r\ndisplays.  They can also be viewed outside of meeting rooms (on small \r\nLCD displays used for room bookings) in the Webex Teams app on your \r\nlaptop or phone.  From a Cisco Webex Teams space, it\'s easy to subscribe\r\n to one of the Appspace digital channels.</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>Think\r\n of all the possibilities: When an employee walks into an office for a \r\nmeeting with coworkers, they can be greeted with a video of the CEO \r\nspeaking at the latest town hall; pictures from the last \'all-hands\' \r\noffsite; - or product updates.  And this same information is available \r\nfor people who work remotely directly from their Webex Teams app- \r\nkeeping the entire team informed and engaged.  We\'re all inundated with \r\ninformation, with shortened attention spans, so isn\'t it great to have \r\nthe ability to better communicate with your employees by making the \r\ninformation more easily available?</p><p><a href=\"https://community.cisco.com/legacyfs/online/fusion/116933_Appspace%203.png\"><img alt=\"Appspace 3.png\" class=\"jive-image image-5\" src=\"https://community.cisco.com/legacyfs/online/fusion/116933_Appspace%203.png\" style=\"height: 132px; width: 620px; display: block; margin-left: auto; margin-right: auto;\" width=\"897\" height=\"191\"></a></p><p>Many\r\n companies certainly like what Appspace has to offer.  Appspace has \r\nexisting clients in Oil and Gas, HealthCare, Media, Finance, \r\nTransportation, and Social Media. At  Cisco, we also use Appspace for \r\nour corporate communication digital signage network  and Appspace room \r\nscheduling displays across 380 offices in 165 countries.</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>If you have Cisco endpoints or use the Webex Teams app, with Appspace, you can definitely get more value from them.</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>My\r\n team at Cisco is starting to use Appspace to broadcast partnership \r\ninformation to all of our partners.  Right now, if I have a general \r\npartner update, I go to each partner Webex Teams Space and paste in my \r\nupdate. With Appspace, I can create a channel, subscribe my partner \r\nspaces to that channel, then post my updates once in Appspace and all my\r\n partners will get the updates.  It\'s a really efficient way to \r\ncommunicate information.</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>With Cisco and <a class=\"jive-link-external-small\" href=\"https://www.appspace.com/\" rel=\"nofollow\" target=\"_blank\">Appspace</a>,\r\n it\'s a great way for companies to take advantage of and optimize this \r\ndigital real estate, enhancing your ability to communicate and market to\r\n your employees and visitors. It\'s a winning combination, and one \r\nthat\'ll make that lobby chair way more comfortable, too!</p><p style=\"min-height: 8pt; padding: 0px;\"> </p><p>- <strong>Frank Geck</strong>, Cisco Webex Solution Partners Business Development Manager</p></div>','2018-10-04 09:40:20','116930_Appspace%201.png---```---116931_appspace.png---```---116932_Appspace%202.png---```---116933_Appspace%203.png','superadmin'),(122,'Oblong Takes Cisco Hollywood','Francis Geck','Hot Article','2018-09-18 13:26:46','Oblong Cisco Hollywood',0,'<div class=\"jive-rendered-content\"><p>It\'s not often that Cisco can claim Hollywood credit, but we can claim something better - we are bringing Hollywood to life.</p><p><a href=\"https://community.cisco.com/legacyfs/online/fusion/117820_oblonglogo.png\"><img alt=\"oblonglogo.png\" class=\"image-1 jive-image\" src=\"https://community.cisco.com/legacyfs/online/fusion/117820_oblonglogo.png\" style=\"height: 120.609px; display: block; margin-left: auto; margin-right: auto; width:219px;\" width=\"219\" height=\"121\"></a></p><p><a class=\"jive-link-external-small\" href=\"https://www.oblong.com/cisco/\" rel=\"nofollow\" target=\"_blank\">Oblong Industries</a>,\r\n a Cisco solution partner, was founded by the man that Hollywood turns \r\nto for envisioning the future of human computer interface as seen in \r\nblockbuster movies - like Minority Report, The Hulk, and Iron Man - John\r\n Underkoffler. At some point, he decided to make the futuristic concepts\r\n a reality. The best part? That reality works seamlessly with Cisco \r\ntechnology.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>So what does Oblong do?</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>Oblong puts a multi-stream content layer on top of <a class=\"jive-link-external-small\" href=\"https://www.webex.com/\" rel=\"nofollow\" target=\"_blank\">Cisco Webex</a>.&nbsp;\r\n Do you want to share content in a more flexible way? Do you want to \r\nmake your content more interactive with multiple people sharing at \r\nonce?&nbsp; Do your collaborators want to see content from different sources \r\nside-by-side? Do you want your system, room, and environment to be so \r\nimmersive that people can\'t help but be captivated?</p><p><a href=\"https://community.cisco.com/legacyfs/online/fusion/117821_oblong1.png\"><img alt=\"oblong1.png\" class=\"jive-image image-2\" src=\"https://community.cisco.com/legacyfs/online/fusion/117821_oblong1.png\" style=\"height: 223.277px; display: block; margin-left: auto; margin-right: auto; width:336px;\" width=\"336\" height=\"223\"></a></p><p>A really cool aspect of using Oblong is the experience in a meeting room.&nbsp; When you walk into a room with <a class=\"jive-link-external-small\" href=\"https://www.oblong.com/mezzanine/features/\" rel=\"nofollow\" target=\"_blank\">Oblong\'s Mezzanine product</a>,\r\n you\'ll often see a number of large screens arrayed to form the shared, \r\npixel-rich workspace. (You might even see screens on multiple wall \r\nsurfaces.) There is a remote control called a wand that provides for \r\ngesture control of the information - while another group at some other \r\nlocation are also doing the same. You\'re all working together, seeing \r\nand controlling the same content at the same time.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>For an example of the utility Mezzanine brings to projects, check out this <a class=\"jive-link-external-small\" href=\"https://vimeo.com/273378252\" rel=\"nofollow\" target=\"_blank\">short video</a> illustrating how a workflow in <a class=\"jive-link-external-small\" href=\"https://www.webex.com/products/teams/index.html\" rel=\"nofollow\" target=\"_blank\">Cisco Webex Teams</a> can jump from desktop to multi-stream Mezzanine meeting space for collaborators in multiple locations. </p><p style=\"text-align: center;\">\r\n</p><p>Or take a deeper dive, and <a class=\"jive-link-external-small\" href=\"https://vimeo.com/174223351\" rel=\"nofollow\" target=\"_blank\">go behind the scenes</a> at Oblong with Spencer Kelly of BBC Click </p><p style=\"text-align: center;\">\r\n</p><p>Behavior is driven by the tools and environment that \r\npeople are in.&nbsp; If you have a traditional meeting, right after lunch \r\nwhen people\'s blood sugar is dropping, and someone is droning on, \r\npresenting from a slide deck, people just aren\'t fully engaged. </p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>Put\r\n those same people in a room with an immersive Oblong &lt;&gt; Cisco \r\nWebex experience - huge screens, all sharing content at the same time, \r\nengaged in discussions - <strong>it\'s exciting!</strong> </p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>It\'s\r\n like you\'re actually in the movie instead of watching one.&nbsp; If you\'re \r\ninterested in how Oblong can do this for your customers or at your \r\ncompany let us know.&nbsp; Then, at your next meeting, your team might \r\nconfuse you for Tony Stark.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>And, if you\'re interested in hearing from the man himself, check out John Underkoffler\'s TED Talk on the future of <a class=\"jive-link-external-small\" href=\"https://www.youtube.com/watch?v=b6YTQJVzwlI\" rel=\"nofollow\" target=\"_blank\">Human Machine Interfaces</a>.</p><p style=\"text-align: center;\">\r\n</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>-- <strong>Frank Geck</strong>, Cisco Webex Solution Partners Business Development Manager</p></div>',NULL,'117820_oblonglogo.png-117821_oblong1.png','superadmin'),(124,'Actiance is now on the Cisco GPL','Francis Geck','Cisco Spark','2018-09-30 22:37:06','',1,'<div class=\"jive-rendered-content\">\r\n                <p>Actiance, a Cisco Webex Teams integrator, is on \r\nCisco’s Global Price List and available for transactions by any Cisco \r\nseller/reseller.</p><p><img alt=\"actiance.png\" class=\"image-1 jive-image\" src=\"https://images.contentstack.io/v3/assets/bltd74e2c7e18c68b20/bltce83eefc39e2f696/5b85933da3326f570bb88eeb/Actiance-Logo.png\" style=\"height: 116px; display: block; margin-left: auto; margin-right: auto; width:385px;\" width=\"385\" height=\"116\"></p>\r\n                <p>Actiance, the leader in communications compliance, \r\narchiving, and analytics, is now on the Cisco Global Price List \r\navailable for Cisco Collaboration Sellers to transact through CCW.  \r\nCompanies understand the need for risk mitigation of their employee \r\ncommunications.  Actiance is the answer.</p>\r\n                <p>Actiance, welcome to the price list!</p>\r\n                <p>To find out more follow up with your Cisco Collaboration Seller or go to <a class=\"jive-link-external-small\" href=\"https://www.actiance.com/\" rel=\"nofollow\" target=\"_blank\">https://www.actiance.com/</a>.</p>\r\n                <p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>-- <strong>Frank Geck</strong>, Cisco Webex Solution Partners Business Development Manager</p></div>',NULL,'Actiance-Logo.png','superadmin'),(125,'Approved Contact Now on the Cisco GPL','Francis Geck','Cisco Spark','2018-09-30 22:38:05','',1,'<div class=\"jive-rendered-content\">\r\n                <p>Approved Contact, a Cisco Webex Teams integrator, is \r\non Cisco’s Global Price List and available for transactions by any Cisco\r\n sellers/resellers.</p><p><img alt=\"approved_contact.png\" class=\"image-1 jive-image\" src=\"https://images.contentstack.io/v3/assets/bltd74e2c7e18c68b20/bltc34bfe6f3531643b/5b72fe3f536510dd40c618a7/Picture1.png\" style=\"height: 169px; display: block; margin-left: auto; margin-right: auto; width:169px;\" width=\"169\" height=\"169\"></p>\r\n                <p>Cisco has focused on “one button to push” for \r\nstarting meetings but what about setting up a meeting?  Approved Contact\r\n has focused on “one touch” to schedule meetings.  In business, we all \r\nsuffer from the scheduling merry go round wasting valuable time just \r\nchecking on people’s availability.  The return on investment for this \r\nservice is huge especially for employee roles where meetings are \r\ncritical to the function of that role.   Approved Contact integrates \r\nwith all the major calendaring services, supports views across multiple \r\norganizations, and has the critical access and security policies.  And, \r\nthis capability is available from within Cisco Collaboration.</p>\r\n                <p>Approved Contact, welcome to the price list!</p>\r\n                <p>To get engaged with Approved Contact, reach out at <a class=\"jive-link-external-small\" href=\"https://approvedcontact.com/\" rel=\"nofollow\" target=\"_blank\">https://approvedcontact.com/</a>.</p>\r\n                <p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>-- <strong>Frank Geck</strong>, Cisco Webex Solution Partners Business Development Manager</p></div>',NULL,'Picture1.png','superadmin'),(126,'Involvio Now on the Cisco GPL','Francis Geck','Cisco Spark','2018-09-30 22:38:57','Involvio',1,'<div class=\"jive-rendered-content\"><p><a class=\"jive-link-external-small\" href=\"https://involvio.com/\" rel=\"nofollow\" target=\"_blank\">Involvio</a> is now on the Cisco GPL with an annuity offering and available for transactions by any Cisco sellers/resellers.</p><p><a href=\"https://community.cisco.com/legacyfs/online/fusion/119389_involvio.png\"><img alt=\"involvio.png\" class=\"image-1 jive-image\" src=\"https://community.cisco.com/legacyfs/online/fusion/119389_involvio.png\" style=\"height: 83.6755px; display: block; margin-left: auto; margin-right: auto; width:266px;\" width=\"266\" height=\"84\"></a></p><p>Involvio is a <a class=\"jive-link-external-small\" href=\"https://www.webex.com/products/teams/index.html\" rel=\"nofollow\" target=\"_blank\">Cisco Webex Teams</a>\r\n Integrator focused on the higher education market with an innovative \r\noffering that addresses student engagement and retention. This is the \r\nbig question for higher education: <em>Are students engaged?</em> If \r\nnot, what actions can be taken to keep them on track? Cisco \r\nCollaboration provides that critical communication channel between \r\nstudents and administration.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p><span>Welcome to the Cisco price list. To get engaged with Involvio reach out at www.involvio.com or </span><a class=\"jive-link-email-small\" href=\"mailto:hello@involvio.com\">hello@involvio.com</a><span>.</span></p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>-- <strong>Frank Geck</strong>, Cisco Webex Solution Partners Business Development Manager</p></div>',NULL,'119389_involvio.png','superadmin'),(145,'Real world walkthrough of building an OAuth Webex integration','Justin Dupree','Hot Article','2018-10-03 15:47:24','OAuth Webex integration',1,'<div class=\"jive-rendered-content\">\r\n              <p>\r\n                  This walkthrough goes into a deep dive explanation of OAuth, what it is\r\n                  used for, and how to work with it. This will help when creating Webex Teams\r\n                  Integrations, which exclusively use OAuth for authorization.\r\n              </p>\r\n              <h2>What is OAuth?</h2>\r\n              <p>\r\n                  OAuth is a framework that allows a user to authorize a product/app to\r\n                  programmatically gain access to data stored within a different product/app.\r\n                  A common example of this would be using your Google or Facebook credentials\r\n                  to log into a third-party site. Instead of creating a new set of\r\n                  credentials for the third-party site, the OAuth process issues a\r\n                  token that represents the user and allows access to the data after the user\r\n                  logs in. The user can then revoke access as needed by revoking the token,\r\n                  vs. removing an entire set of user credentials.\r\n              </p>\r\n              <h3>Why OAuth is Important: Security Issues and User Limitations</h3>\r\n              <p>\r\n                  Before OAuth, if users (also known as resource owners) wanted to allow\r\n                  another integration or application to access their data or resources from\r\n                  another account, they would have to share their credentials with the other\r\n                  third-party application. However, this process created security\r\n                  issues, particularly related to password storage. Sites would either store\r\n                  user passwords in clear text or as an encrypted hash - even when encrypted,\r\n                  there are several free sites that can be used to decrypt hashed strings,\r\n                  and there is little way to know what security measures the third-party site\r\n                  might be using to protect the credentials as a whole.\r\n              </p>\r\n              <p>\r\n                  The other issue was with individual user limitations. Before OAuth,\r\n                  revoking access to one individual end user wasn\'t possible without revoking\r\n                  access to all users working with the same credentials to access the\r\n                  resources. This meant resource owners couldn\'t properly restrict access on\r\n                  a case by case basis—if you had the credentials, you had access.\r\n              </p>\r\n              <p>\r\n                  OAuth solved these issues. With OAuth, third-party applications\r\n                  are given an access token which is used to obtain information about the\r\n                  specific service or resource; this token represents the user without\r\n                  exposing their actual credentials. The process of retrieving this access\r\n                  token is called the grant flow.\r\n              </p>\r\n              <h3>Integrations and OAuth in Webex Teams</h3>\r\n              <p>\r\n                  Integrations request permission to invoke Webex Teams APIs on behalf of a\r\n                  user. An example of an integration would be a connection between Webex\r\n                  Teams and a Box folder with the <a href=\"https://apphub.webex.com/categories/all/integrations/box-cisco-systems-2625\">Box integration</a>. Any\r\n                  changes (such as uploading new files or making comments on\r\n                  files) would invoke the Webex Teams API to post a message in a space on\r\n                  behalf of the user that authorized the integration. This differs from a\r\n                  Webex Teams bot, which does not have access to individual user data and\r\n                  exists as its own entity.\r\n              </p>\r\n              <h2>\r\n                  Helpful Definitions\r\n              </h2>\r\n              <p>\r\n                  Before moving on, knowing the definitions listed below will be helpful, as\r\n                  they may be referenced throughout the rest of this post. For more\r\n                  information, you can also visit\r\n                  <a href=\"https://developer.webex.com/authentication.html\">our Authentication documentation</a>.\r\n              </p>\r\n              <h3>The Four OAuth Roles (as described in <a href=\"https://tools.ietf.org/html/rfc6749#section-1.1\">RFC6749</a>):</h3>\r\n              <p>\r\n                  <em>Resource Owner</em> — An entity capable of granting access to a protected\r\n                  resource. When the resource owner is a person, it is typically referred to as an end user.\r\n              </p>\r\n              <p>\r\n                  <em>Resource Server</em> — The server hosting the protected resources, capable\r\n                  of accepting and responding to protected resource requests using Access Tokens.\r\n              </p>\r\n              <p>\r\n                  <em>Client</em> — An application making protected resource requests on\r\n                  behalf of the resource owner and with its authorization. The term \"client\" does\r\n                  not imply any particular implementation characteristics (e.g.,\r\n                  whether the application executes on a server, a desktop, or other\r\n                  devices).\r\n              </p>\r\n              <p>\r\n                  <em>Authorization Server</em> — The server issuing Access Tokens to the\r\n                  client after successfully authenticating the Resource Owner and obtaining authorization.\r\n              </p>\r\n              <p>\r\n                  <em>Client ID</em> — The Authorization Server (in this case, the Webex Teams API) provides the\r\n                  Client Identifier for the integration. The Client ID however, is distinct\r\n                  from the Client Secret (mentioned next) because it is exposed to the\r\n                  Resource Owner (i.e. the user of the integration) and shouldn\'t be used by\r\n                  itself for client authentication. The Client ID is unique to the\r\n                  Authorization Server.\r\n                  <br>\r\n                  Example: <code>a3ae1859d31806348e9fa80e20e5c71d3f1496ca61879bde4ef39739897e4788d</code>\r\n              </p>\r\n              <p>\r\n                  <em>Client Secret</em> — The Authorization Server (again, the Webex Teams API in this case) also\r\n                  provides the Client Secret for the integration, which authorizes the Client\r\n                  that is requesting an Access Token. In this way, OAuth 2 uses the Client\r\n                  Secret to verify that a Client should have access to the Resource Server\r\n                  that\'s waiting for an Access Token, so it can make requests on the user\'s\r\n                  behalf.\r\n                  <br>\r\n                  Example: <code>f883984e7a2ba716179f9a5e9cf33abb1b1b83f067a8b0c9c4fa90dae256998c7</code>\r\n              </p>\r\n              <p>\r\n                  <em>Access Token</em> — An object that contains security information such as identity and\r\n                  privileges/scopes for the user account being authorized. Access Tokens for\r\n                  the Webex Teams API are valid for 14 days before expiring automatically.\r\n              </p>\r\n              <p>\r\n                  <em>Refresh Token</em> — A Refresh Token is used to acquire a new Access Token after the original\r\n                  token generated by the Grant Flow expires or is about to expire. The\r\n                  Refresh Token should be stored securely by the application, and is valid for\r\n                  90 days unless used, at which point the timer will reset (making this type\r\n                  of token effectively perpetual). This enables you to renew the Access Token\r\n                  for a user before it expires (at the previously mentioned 14 days),\r\n                  allowing a user to essentially remain authenticated forever.\r\n              </p>\r\n              <p>\r\n                  <em>Scopes</em> — Scopes determine what resources the Access Token has access to. A full\r\n                  list of scopes available in Webex Teams can be found in\r\n                  <a href=\"https://developer.webex.com/authentication.html\">\r\n                     our Authentication documentation\r\n                  </a>.\r\n              </p>\r\n              <p>\r\n                  <em>State</em> — This is a unique identifier that can optionally be defined when creating\r\n                  the integration and can be used to verify the authorization request when\r\n                  it\'s sent to the Redirect URI. Basically, this helps check whether the\r\n                  request containing the Authorization Code is coming from the correct Client\r\n                  or not.\r\n              </p>\r\n              <p>\r\n                  <em>Redirect URI</em> — This represents the endpoint where your users are sent to after they\r\n                  authorize the application. This is typically a valid HTTP endpoint which\r\n                  supports TLS (recommended), so the Authorization Code or Access Tokens can\r\n                  be transmitted securely to avoid attacks.\r\n                  <br>\r\n                  Example: <code>https://lockbot.cisco.sparkbot.io/oauth</code>\r\n              </p>\r\n              <p>\r\n                  Bear in mind, for native and mobile apps, the Redirect URI scheme may be\r\n                  different. For example: <code>mydemoapp://oauth</code>\r\n              </p>\r\n              <p>\r\n                  The following link includes more information regarding the Redirect URI:\r\n                  <a href=\"https://www.oauth.com/oauth2-servers/redirect-uris/\">\r\n                      https://www.oauth.com/oauth2-servers/redirect-uris/\r\n                  </a>\r\n              </p>\r\n              <h2>\r\n                  OAuth Grant Types\r\n              </h2>\r\n              <p>\r\n                  As noted above, in order to access the Resource Owner\'s protected\r\n                  resources, the Client needs to get a credential representing the Resource\r\n                  Owner\'s authorization and then obtain an Access Token. There are four grant\r\n                  types in OAuth 2.0:\r\n              </p>\r\n              <ul><li>Authorization Code</li><li>Implicit</li><li>Resource Owner Password Credentials</li><li>Client Credentials</li></ul>\r\n              <p>\r\n                  Webex Teams currently only supports Authorization Code, which is a grant\r\n                  flow used mostly with web applications to get access to an API.\r\n              </p>\r\n              <h2>\r\n                  Setting up the Redirect URI\r\n              </h2>\r\n              <p>\r\n                  We\'ll now get into the actual steps to create the integration. First step:\r\n                  your Redirect URI. As also previously mentioned above, the Redirect\r\n                  URI scheme could be different depending on the nature of the application,\r\n                  whether it\'s a web based app, a native app, or a mobile app. The Redirect\r\n                  URI acts as the callback entry point for the app and could either be an\r\n                  HTTP redirect URI or custom URI scheme. For example:\r\n                  <code>https://mydemoapp.com:10023/register</code> or\r\n                  <code>mydemoapp://register</code>\r\n              </p>\r\n              <p>\r\n                  We\'ll focus on how to set up an HTTP Redirect URI for this walkthrough. The\r\n                  Redirect URI is required to use TLS 1.1 or higher for any HTTP URI, in\r\n                  order to protect the endpoint. This prevents any interception during the\r\n                  authorization process. For development purposes, on a Mac you can locally\r\n                  launch a simple light weight server from Terminal with the following\r\n                  command (on Windows, you\'d need to install Python first):\r\n                  </p><pre class=\"dark\"><code class=\"lang-shell\">python -m SimpleHTTPServer</code></pre>\r\n              \r\n              <p>\r\n                    You should see the following response if everything works correctly:\r\n              </p>\r\n              <p>\r\n                      <img src=\"https://images.contentstack.io/v3/assets/bltd74e2c7e18c68b20/blt25bd03d388d5ec8b/5b8733acc44e2f610ba7d17a/oauth-walkthrough-image001.png\" width=\"432\" height=\"234\" border=\"0\">\r\n              </p>\r\n              <p>\r\n                  This is a simple built-in web server from Python that listens on default\r\n                  port 8000, so <code>http://0.0.0.0:8000</code> or <code>http://localhost:8000</code> will be your\r\n                  redirect URI.\r\n              </p>\r\n              <p>\r\n              If you use this method, you will need to use a tunneling proxy such as    <a href=\"https://ngrok.com/\">ngrok</a> to expose the endpoint to the public\r\n                  internet. Many users find this convenient for initial development, but once\r\n                  you\'re ready to run this in production, you\'ll want to get an actual hosted\r\n                  site. Common options many developers use include AWS or Heroku, but you\'re\r\n                  not limited to any specific hosting option as long as your URL is\r\n                  accessible to the open Internet (i.e. not locked down behind a firewall).\r\n              </p>\r\n              <h2>\r\n                  Creating an Integration through the Webex for Developers Portal\r\n                </h2>\r\n              <p>\r\n                  The next step is to create your integration through the Webex for\r\n                  Developers Portal, which is very easy. Simply log into your Webex \r\n              account at  <a href=\"https://developer.webex.com/\">https://developer.webex.com</a>,\r\n                  click on your avatar at the top right, then click \"My Webex Teams Apps\".\r\n                  This will take you to the \"My Apps\" page. Click the blue plus at the top\r\n                  right and then choose \"Create an Integration\". You should now be on the\r\n                  \"New Integration\" page. Choose a unique name, a contact email (for Cisco\r\n                  internal support use only, it won\'t be referenced anywhere publicly), an\r\n                  icon, and the general description or purpose of the integration.\r\n              </p>\r\n              <p>\r\n                  Once these are completed, provide a Redirect URI. You can enter more than\r\n                  one by separating them with a comma, which allows you to redirect your\r\n                  application to different endpoints using a single integration. This could\r\n                  be useful if you have multiple data centers that all perform the same\r\n                  tasks, such as when you have failover setup.\r\n              </p>\r\n              <p>\r\n                  Next, choose which scopes your integration needs access to, and then lastly\r\n                  submit the app by clicking on the \"Create Integration\" button in blue at\r\n                  the bottom.\r\n              </p>\r\n              <p>\r\n                  Once it has been submitted, be sure to save and store the Client Secret\r\n                  provided (located below the Scopes section of the page) before directing\r\n                  away from this page. If this is lost, you will need to regenerate a new\r\n                  one.\r\n              </p>\r\n              <p>\r\n                  The OAuth Authorization URL shown at the bottom of the integration details\r\n                  page provide the following, in this order:\r\n              </p>\r\n              <ul><li>\r\n                      client_id\r\n                  </li><li>\r\n                      response-type\r\n                  </li><li>\r\n                      redirect_uri\r\n                  </li><li>\r\n                      scopes\r\n                  </li><li>\r\n                      state\r\n                  </li></ul>\r\n              <p>\r\n                  We will reference what to do with that Authorization URL in the next\r\n                  section.\r\n              </p>\r\n              <h2>\r\n                  Authorization Code Grant Flow\r\n              </h2>\r\n              <h3>Retrieving the Authorization Code</h3>\r\n              \r\n              <p>\r\n                  After your Redirect URI is set up and your Webex Teams integration is\r\n                  created, the next step is to get your Authorization Code. The Client (your\r\n                  app) will ask the Authorization Server (Webex Teams) for an Authorization\r\n                  Code, which will later be exchanged for an Access Token. To do so, you will\r\n                  need to send your prospective users to <a href=\"https://api.ciscospark.com/v1/authorize\">\r\n                      https://api.ciscospark.com/v1/authorize\r\n                  </a> with the following parameters included, all in one form-encoded URL:\r\n              </p>\r\n              <ul><li>\r\n                      <code>response_type</code> — Must be set to \'code\' (string)\r\n                  </li><li>\r\n                      <code>client_id</code> — The Client Identifier (ID), issued when registering the app\r\n                  </li><li>\r\n                      <code>redirect_uri</code> — Must match one of the URIs provided when the application was created\r\n                  </li><li>\r\n                      <code>scope</code> — A space-separated list of scopes being requested by the application.\r\n                      This should match exactly with the scopes that were selected when the\r\n                      application was created (see\r\n                      <a href=\"https://developer.webex.com/authentication.html\">\r\n                          our Authentication guide\r\n                      </a>\r\n                      for full list)\r\n                  </li><li>\r\n                      <code>state</code> — A unique string used to verify authenticity of the incoming request\r\n                      to the defined redirect URI (optional)\r\n                  </li></ul>\r\n              <p>\r\n                  Using a Cisco-built and publicly available integration called LockBot as an\r\n                  example, when someone goes to its page on the\r\n                  <a href=\"https://apphub.webex.com/integrations/lockbot-cisco-systems\">Webex App Hub</a>\r\n                  and clicks \"Visit Site To Connect\", they\'re directed to <code>https://lockbot.cisco.sparkbot.io/request/</code>.\r\n              </p>\r\n              <p>\r\n                  The Grant button on that page goes to a URL that looks like this (note all\r\n                  the parameters mentioned above are included):\r\n              </p>\r\n              <p>\r\n                  </p><pre class=\"dark\"><code>https://api.ciscospark.com/v1/authorize?client_id=a3ae1859d31806348e9fa80e20e5c71d3f1496ca61879bde4ef39739897e4788d&response_type=code&redirect_uri=https%3A%2F%2Flockbot.cisco.sparkbot.io%2Foauth&scope=spark%3Amessages_write%20spark%3Arooms_read%20spark%3Amemberships_read%20spark%3Arooms_write%20spark%3Apeople_read%20spark%3Akms%20spark%3Amemberships_write&state=lockbot</code></pre>\r\n              \r\n              <p>\r\n                  With your integration, this URL should match the OAuth Authorization URL\r\n                  shown on the integration detail page in \"My Apps\" when you created your\r\n                  Webex Teams integration.\r\n              </p>\r\n              <p>\r\n                  When a user clicks on that link, it will send them to the standard Webex\r\n                  login page. Once they sign in, they would see the following\r\n                  authorization prompt for LockBot:\r\n              </p>\r\n              <p>\r\n                  <img src=\"https://images.contentstack.io/v3/assets/bltd74e2c7e18c68b20/blt92f36d838147c86a/5b8733aca3326f570bb893a7/oauth-walkthrough-image002.png\" width=\"251\" height=\"356\" border=\"0\">\r\n              </p>\r\n              <p>\r\n                  Once they click Accept, they\'ve granted LockBot access to their Webex Teams\r\n                  data, but LockBot doesn\'t yet have a functional token to use. Instead,\r\n                  Webex Teams sends an Authorization Code to the previously defined Redirect\r\n                  URI (in LockBot\'s case, <code>https://lockbot.cisco.sparkbot.io/oauth</code>) with the code and state, like the following:\r\n                  </p>\r\n              <p>\r\n                  </p><pre class=\"dark\"><code>https://lockbot.cisco.sparkbot.io/oauth?code=Njc5NmI0YTU4OTc1ZDRhNDczMDcxZDE4ZDI4ZmQzMjMzNjJiZDczMWQzMTgwMGI0O&state=lockbot</code></pre>\r\n              \r\n              <p>\r\n                  Looking at that URL, the code in the query string and state \"lockbot\"\r\n                  previously passed in the request are both present. This code will need to\r\n                  be exchanged for an actual token, which we go through in a later step.\r\n              </p>\r\n              <p>\r\n                  Next as a quick sidebar, we\'ll show how to create a real simple Grant Flow\r\n                  Landing Page that mimics what a user would see with LockBot; feel free to\r\n                  use it as a baseline for your own landing page.\r\n              </p>\r\n              <h3>Creating a Grant Flow Landing Page</h3>\r\n              <p>\r\n                  Below is a very simple HTML example showing how to build an interface with\r\n                  a Grant button, allowing the user to grant the integration access to their\r\n                  Webex Teams data. The main piece to note is the URL associated with the\r\n                  Grant button itself, which sends the user into the Grant Flow process:\r\n              </p>\r\n              <p>\r\n                  <img src=\"https://images.contentstack.io/v3/assets/bltd74e2c7e18c68b20/blt66047c38202b4c49/5b8733ac0cdef43e0b8626ad/oauth-walkthrough-image003.png\" width=\"432\" height=\"422\" border=\"0\">\r\n              </p>\r\n              <p>\r\n                  This is the HTML used to create the above LockBot Grant page.\r\n              </p>\r\n<pre class=\"dark\"><code class=\"lang-html\"><!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>LockBot Permissions Request</title>\r\n    <meta charset=\'utf-8\'>\r\n    <link rel=\'stylesheet\' type=\'text/css\' href=\"/static/css/index.css\">\r\n    <script src=\'http://code.jquery.com/jquery-1.4.2.js\'></script>\r\n  </head>\r\n  <body>\r\n    <section class=\'container\'>\r\n      <div class=\'center content\'>\r\n        <div class=\'spacer\'></div>\r\n        <img src= \"/static/css/lock-bot.png\"/>\r\n        <div class=\'spacer\'></div>\r\n        <div class=\'center\'>\r\n          <h1>Grant Lockbot Access To Webex Teams</h1>\r\n        </div>\r\n        <div class=\'spacer-small\'></div>\r\n        <div class=\'center\'>\r\n          <a href=\"https://api.ciscospark.com/v1/authorize?client_id=a3ae1859d31806348e9fa80e20e5c71d3f1496ca61879bde4ef39739897e4788d&response_type=code&redirect_uri=https%3A%2F%2Flockbot.cisco.sparkbot.io%2Foauth&scope=spark%3Amessages_write%20spark%3Arooms_read%20spark%3Amemberships_read%20spark%3Arooms_write%20spark%3Apeople_read%20spark%3Akms%20spark%3Amemberships_write&state=lockbot\">\r\n            <div class=\'button\' style=\'width:512px;\'>GRANT</div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </body>\r\n</html>\r\n</code></pre>\r\n              <h3>Getting the Access Token</h3>\r\n              <p>\r\n                  Once your user has moved through the Grant Flow process and you have the\r\n                  Authorization Code, next you\'ll need to exchange that code for the actual\r\n                  Access Token your app can use to invoke the Webex Teams APIs on behalf of\r\n                  your user. To do this, the app will need to perform an HTTP POST to the\r\n                  following URL with a standard set of OAuth parameters (this endpoint will\r\n                  only accept an <code>x-www-form-urlencoded</code> body): <code>https://api.ciscospark.com/v1/access_token</code>\r\n              </p>\r\n              <p>\r\n                  The required parameters are:\r\n              </p>\r\n              <ul><li>\r\n                        <code>grant-type</code> — This should be set to \"authorization_code\"\r\n                  </li><li>\r\n                        <code>client_id</code> — Issued when creating your integration\r\n                  </li><li>\r\n                        <code>client_secret</code> — Remember this guy? You kept it safe somewhere when creating your\r\n                  integration.\r\n                </li><li>\r\n                  <code>code</code> — The Authorization Code from the previous step\r\n                </li><li>\r\n                <code>redirect_uri</code> — Must match the one used in the previous step\r\n                  </li></ul>\r\n                <p>\r\n                  An example might look like this:\r\n              </p>\r\n              <p>\r\n                      </p><pre class=\"dark\"><code>https://api.ciscospark.com/v1/access_token?grant-type=authorization_code&client_id=a3ae1859d31806348e9fa80e20e5c71d3f1496ca61879bde4ef39739897e4788d&client_secret=f883984e7a2ba716179f9a5e9cf33abb1b1b83f067a8b0c9c4fa90dae256998c7&code=Njc5NmI0YTU4OTc1ZDRhNDczMDcxZDE4ZDI4ZmQzMjMzNjJiZDczMWQzMTgwMGI0O&redirect_uri=https%3A%2F%2Flockbot.cisco.sparkbot.io%2Foauth</code></pre>\r\n              \r\n              <p>\r\n                  Webex Teams will then respond with JSON containing an Access Token that\'s\r\n                  valid for 14 days, and a Refresh Token that expires in 90 days, as shown in\r\n                  the example below:\r\n              </p>\r\n              <pre class=\"dark\"><code class=\"lang-json\">{\r\n    \"access_token\":\"a375503d74185e03b67322149dceffbe3ce130133bbf4d6282341ae73a31b17a2\",\r\n    \"expires_in\":1209600, //seconds\r\n    \"refresh_token\":\"a434252a53e6f97483df14d4097ba956a24cdf56a6673014a1647ef6eadf4cc50\",\r\n    \"refresh_token_expires_in\":7776000 //seconds\r\n}</code></pre>\r\n              <p>\r\n                  The Refresh Token is used to get a new Access Token before it expires, so\r\n                  you can keep your application live without prompting the user to go through\r\n                  the grant process again. Every time the Refresh Token is used to get a new\r\n                  Access Token, the expiration timer will reset.\r\n              </p>\r\n              <p>\r\n                  However, if you allow the Access Token to expire, using it to make a\r\n                  request from the API will result in an \"Invalid Token Error\" like the\r\n                  following example:\r\n              </p>\r\n              <p>\r\n                  <img src=\"https://images.contentstack.io/v3/assets/bltd74e2c7e18c68b20/blt6cab456dee8e7d7f/5b8733acefa29a430be85fc3/oauth-walkthrough-image004.png\" width=\"432\" height=\"79\" border=\"0\">\r\n              </p>\r\n              <p>\r\n                  If the Access Token expires, you need to use the Refresh Token to generate\r\n                  a new Access Token. To refresh an Access token, it\'s recommended to catch token \r\n                  errors in your application, and when they occur, refresh the token and try again. \r\n                  If the refresh fails, \r\n                  this might mean your Refresh Token is older than 90 days and has expired, or that the\r\n                  user or an admin has otherwise revoked their tokens. When this happens, direct the user \r\n                  to the Webex Teams login process again and get a new set of tokens for them. This is \r\n                  considered a better practice than using a timer to refresh tokens before they expire.\r\n              </p>\r\n              <p>\r\n                  Getting a new Access Token using the Refresh Token is done much like\r\n                  getting the initial Access Token but with different parameters:\r\n              </p>\r\n              <ul><li>\r\n                        <code>grant-type</code> — This should be set to \"refresh_token\"      \r\n                  </li><li>\r\n                        <code>client_id</code> — Same client_id you received when you created your integration\r\n      \r\n                  </li><li>\r\n                        <code>client_secret</code> — Same secret you used to get the Access Token originally\r\n      \r\n                  </li><li>\r\n                        <code>refresh_token: </code> — This is the Refresh Token returned when you got the initial Access Token      \r\n                  </li></ul>\r\n              <p>\r\n                  An example might look like:\r\n              </p>\r\n              <p>\r\n                      </p><pre class=\"dark\"><code>https://api.ciscospark.com/v1/access_token?grant-type=refresh_token&client_id=a3ae1859d31806348e9fa80e20e5c71d3f1496ca61879bde4ef39739897e4788d&client_secret=f883984e7a2ba716179f9a5e9cf33abb1b1b83f067a8b0c9c4fa90dae256998c7&refresh_token=a434252a53e6f97483df14d4097ba956a24cdf56a6673014a1647ef6eadf4cc50</code></pre>\r\n              \r\n              <p>\r\n                  Once this is done, a new Access Token will be returned in the response and\r\n                  can be used for the next 14 days.\r\n              </p>\r\n              <p>\r\n                  Example response:\r\n              </p>\r\n              <p>\r\n                    </p><pre class=\"dark\"><code class=\"lang-json\">{\r\n    \"access_token\": \"82d19946849bac67373eb401824b3afcb919544dcda8314220a867a6e561b9e43\",\r\n    \"expires_in\": 1209599, //seconds\r\n    \"refresh_token\": \"a434252a53e6f97483df14d4097ba956a24cdf56a6673014a1647ef6eadf4cc50\",\r\n    \"refresh_token_expires_in\": 7775975 //seconds\r\n}</code></pre>\r\n              \r\n              <h2>\r\n                  Example: Retrieving the Authorization Code via Python\r\n                </h2>\r\n              <p>\r\n                  Provided below is a snippet in Python, which shows how to retrieve the\r\n                  authorization code through the back-end once the request is redirected back\r\n                  to the server endpoint or Redirect URI. For this example, we\'re using the\r\n                  Flask web framework. Full working code is available at: \r\n                  <a href=\"https://github.com/webex/Spark-API-Demos/tree/master/OAuthDemo\">\r\n                      https://github.com/webex/Spark-API-Demos/tree/master/OAuthDemo\r\n                  </a>\r\n              </p>\r\n              <p>\r\n                  </p><pre class=\"dark\"><code class=\"lang-python\">def oauth():\r\n    \"\"\"Retrieves oauth code to generate tokens for users\"\"\"\r\n\r\n    if \"code\" in request.args and state == \"YOUR_STATE_STRING\":\r\n        state = request.args.get(\"state\") #Captures value of the state.\r\n        code = request.args.get(\"code\") #Captures value of the code.\r\n        print \"OAuth code:\", code\r\n        print \"OAuth state:\", state\r\n        access_token, refresh_token = get_tokens(code) #As you can see, get_tokens() uses the code and returns access and refresh tokens.\r\n\r\n        #Now, let\'s do something with the generated token: Get the user\'s info: PersonId, Email Address and DisplayName.\r\n        personID, emailID, displayName = get_oauthuser_info(access_token)\r\n        print \"personID:\", personID\r\n        print \"email ID:\", emailID\r\n        print \"display Name\", displayName\r\n        return render_template(\"granted.html\")\r\n    else:\r\n        return render_template(\"index.html\")\r\n                  </code></pre>\r\n              \r\n              <h2>\r\n                  Example: Retrieving an Access Token Via Python\r\n              </h2>\r\n              <p>\r\n                  The following example snippet is part of the same app as the last example,\r\n                  but shows how to retrieve an Access Token instead of the Authorization\r\n                  Code:\r\n              </p>\r\n              <p>\r\n                  </p><pre class=\"dark\"><code class=\"lang-python\">import requests\r\nimport json\r\n\r\nclientID = \"APP_CLIENTID\"\r\nsecretID = \"APP_SECRETID\"\r\nredirectURI = \"APP_REDIRECTURI\" #This could different if you publicly expose this endpoint.\r\n\r\ndef get_tokens(code):\r\n    #Gets access token and refresh token\r\n    print \"code:\", code\r\n    url = \"https://api.ciscospark.com/v1/access_token\"\r\n    headers = {\'accept\':\'application/json\',\'content-type\':\'application/x-www-form-urlencoded\'}\r\n    payload = (\"grant_type=authorization_code&client_id={0}&client_secret={1}&\"\r\n                    \"code={2}&redirect_uri={3}\").format(clientID, secretID, code,  redirectURI)\r\n    req = requests.post(url=url, data=payload, headers=headers)\r\n    results = json.loads(req.text)\r\n    print results\r\n    access_token = results[\"access_token\"]\r\n    refresh_token = results[\"refresh_token\"]\r\nreturn access_token, refresh_token\r\n\r\nget_tokens(\"123YRDDBSSDDS...\")</code></pre>\r\n              \r\n              <p>\r\n                  You can get the complete demo code at: <a href=\"https://github.com/webex/Spark-API-Demos/tree/master/OAuthDemo\">https://github.com/webex/Spark-API-Demos/tree/master/OAuthDemo</a>\r\n              </p>\r\n              <h2>\r\n                  Example: Retrieving an Access Token via Postman\r\n                </h2>\r\n              <p>\r\n                  While this isn\'t likely to be anything you\'ll use in production, sometimes\r\n                  having a GUI REST Client example makes things easier to understand.\r\n              </p>\r\n              <ol><li>\r\n                    Retrieve your Authorization Code from the original Grant Flow and save it -\r\n                    note the authorization code is only valid for one request and will become\r\n                    invalid once the request to /access_token is made.\r\n                    <p>\r\n                        Example:\r\n                        <code>code=Njc5NmI0YTU4OTc1ZDRhNDczMDcxZDE4ZDI4ZmQzMjMzNjJiZDczMWQzMTgwMGI0O&state=<insert\r\n                        chosen state></code>\r\n                    </p>\r\n                 </li><li>\r\n                    In Postman, make a POST request using the following information:\r\n                    <p>\r\n                        <strong>Endpoint:</strong>\r\n                        https://api.ciscospark.com/v1/access_token\r\n                    </p>\r\n                    <p>\r\n                        <strong>Headers:</strong>\r\n                    </p>\r\n                    <p>\r\n                        <strong>Accept:</strong>\r\n                        application/json\r\n                    </p>\r\n                    <p>\r\n                        <strong>Content-type</strong>\r\n                        application/json\r\n                    </p>\r\n                    <p>\r\n                        <strong>Body:</strong>\r\n                    </p>\r\n                    <p>\r\n                      </p><pre class=\"dark\"><code class=\"lang-json\">{\r\n  \"grant_type\":\"authorization_code\",\r\n  \"client_id\":\"a3ae1859d31806348e9fa80e20e5c71d3f1496ca61879bde4ef39739897e4788d\",\r\n  \"client_secret\":\"f883984e7a2ba716179f9a5e9cf33abb1b1b83f067a8b0c9c4fa90dae256998c7\",\r\n  \"code\":\"Njc5NmI0YTU4OTc1ZDRhNDczMDcxZDE4ZDI4ZmQzMjMzNjJiZDczMWQzMTgwMGI0O\",\r\n  \"redirect_uri\":\"https://lockbot.cisco.sparkbot.io\"\r\n}</code></pre>\r\n                    \r\n                    <p>\r\n                        Once you have performed the POST request, the response body should include\r\n                        both the Access Token and the Refresh Token.\r\n                    </p>\r\n                 </li><li>\r\n                    In order to generate a new access_token using the refresh_token, you can do\r\n                    a POST to the same endpoint and with the same header mentioned above, but\r\n                    with a slightly different body\r\n                <p>\r\n                  </p><pre class=\"dark\"><code class=\"lang-json\">{\r\n  \"grant_type\":\"refresh_token\",\r\n  \"client_id\":\"a3ae1859d31806348e9fa80e20e5c71d3f1496ca61879bde4ef39739897e4788d\",\r\n  \"client_secret\":\"f883984e7a2ba716179f9a5e9cf33abb1b1b83f067a8b0c9c4fa90dae256998c7\",\r\n  \"refresh_token\":\"a434252a53e6f97483df14d4097ba956a24cdf56a6673014a1647ef6eadf4cc50\"\r\n}</code></pre>\r\n                \r\n                </li></ol>\r\n              <p>\r\n                  Using OAuth is a secure, though slightly complex way to allow access to\r\n                  Webex Teams API resources. Hopefully this detailed walkthrough helps make\r\n                  sense of the steps necessary to get from the creation of your Webex Teams\r\n                  application on the developer portal to the retrieval of a valid Access\r\n                  Token for your application to use. If you have any additional questions,\r\n                  you can reach out to the <a href=\"https://developer.webex.com/support.html\">Webex Developer Support team</a> via email or live\r\n                  chat 24/7/365.\r\n              </p>\r\n              <p>\r\n                  <em>Colby Alladaye, Arielle Johnson, and Jeff Marshall also contributed to this post.</em>\r\n              </p>\r\n              </div>','2018-10-14 08:10:02','oauth-walkthrough-image001.png---```---oauth-walkthrough-image002.png---```---oauth-walkthrough-image003.png---```---lock-bot.png---```---oauth-walkthrough-image004.png','superadmin'),(146,'Spark Bot Demo','Taylor Hanson','Hot Article','2018-10-04 09:30:17','Bot',0,'<p>This quick walkthrough is intended to give you a very simple Spark \r\nbot that responds to commands typed into a room with a few example \r\nresponses – nothing too fancy, but easy to build on. The commands will \r\nbe passed to the bot using mentions – so if I type into a room where the\r\n bot is a participant:</p><p style=\"padding-left: 30px;\"><span style=\"font-family: \'Courier New\';\">@MrWayne batsignal </span></p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>The\r\n bot will retrieve that command, process it, and send us back a message.\r\n We’ll go step by step from bot registration to code upload and testing.\r\n </p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p><span style=\"text-decoration: underline;\"><strong>Step 1: Create the Bot</strong></span></p><p>To\r\n register a Bot, you’ll need to be logged in to Spark with a “real” user\r\n – each bot needs to be tied to an actual user account. Adding one is \r\nextra simple, however – just click <a class=\"jive-link-external-small\" href=\"https://developer.ciscospark.com/add-app.html\" rel=\"nofollow\" target=\"_blank\">here</a> \\and select “Create a Bot”; there’s only a couple fields to fill out:</p><p><a href=\"https://community.cisco.com/legacyfs/online/fusion/97743_bot1.png\"><img alt=\"bot1.png\" class=\"image-1 jive-image\" src=\"https://community.cisco.com/legacyfs/online/fusion/97743_bot1.png\" style=\"height: 217.7px; width:434px; display: block; margin-left: auto; margin-right: auto;\" width=\"434\" height=\"218\"></a></p><p>Display\r\n Name is how you want the bot to show up in a room (like “Mr. Wayne”); \r\nBot Username is the email address, since every Spark user is registered \r\nunder an email – this should be similar to the Display Name, but it can \r\nbe unique.&nbsp; Note that you are not populating the entire email – they \r\nwill always end with @sparkbot.io, can’t make on with a gmail.com email \r\nor anything similar, so you’re just adding the prefix. The username \r\nprefix does need to be unique; if you don’t get a green check at the end\r\n of the @sparkbot.io reference, then the username was already taken. The\r\n Icon is the avatar for the bot, which will also show inside a room.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>Once\r\n the bot is created, you’ll need to save the access token that is \r\nprovided – keep it someplace safe.&nbsp; The token effectively never expires \r\n(it’s good for 100 years) but if you forget it, you’ll have to generate a\r\n new one. There’s no way to get it back.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p><em>Note:</em>\r\n Because this is a bot, OAuth is not used in this process; no need to \r\nrefresh tokens any specific period. Only time you’d need to do the \r\nregeneration is if you lose the token, as mentioned above.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p><span style=\"text-decoration: underline;\"><strong>Step 2: Add the Bot to a Room</strong></span></p><p>Pick\r\n a room, any room!&nbsp; Either add the bot to a room you’re already in or \r\nhave the bot create a new room using its access token – whatever you \r\nprefer.&nbsp; The bot just needs to be present in a room in order to read \r\nmessages and send messages back to it.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p><span style=\"text-decoration: underline;\"><strong>Step 3: Create an Outbound Webhook</strong></span></p><p>Your\r\n webhook URL needs to be accessible on the public Internet – if you want\r\n to use your local machine, you can use a service like <a class=\"jive-link-external-small\" href=\"https://ngrok.com/\" rel=\"nofollow\" target=\"_blank\">Ngrok</a> to make your personal machine accessible to the world on a specific port for free.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>But\r\n that means the webhook only works when you machine is up and live. \r\nAlternatively, Amazon Web Services offers a free EC2 micro instance for 1\r\n year and more professional tiers at varied pricing.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>Once you have an endpoint to use, create the webhook using the request on this <a class=\"jive-link-external-small\" href=\"https://developer.ciscospark.com/endpoint-webhooks-post.html\" rel=\"nofollow\" target=\"_blank\">page</a>.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>Make\r\n sure that the bearer token used in creating the webhook is the bearer \r\ntoken of the bot. You’ll need to know the ‘roomId’ of the room the bot \r\nis hanging out in, and you’ll need to know your own ‘targetUrl’ (the \r\nNgrok link or the AWS link in our examples above); you’ll also want to \r\nset the ‘resource’ to messages and the ‘event’ to created. Here’s what \r\nthe Webhook should look like once it’s been created:</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><pre class=\"plain\" name=\"code\">{\r\n\"id\": \"Y2lz111111112222222233333333\",\r\n\"name\": \"BotDemo Project ROOMNAME\",\r\n\"targetUrl\": \"http://ec2-10-20-30-40.us-west-2.compute.amazonaws.com:10010\",\r\n\"resource\": \"messages\",\r\n\"event\": \"created\",\r\n\"filter\": \"roomId=Y2lz12345678901234567890\"\r\n}\r\n\r\n\r\n\r\n\r\n\r\n</pre><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>Check out the <a class=\"jive-link-external-small\" href=\"https://developer.ciscospark.com/webhooks-explained.html\" rel=\"nofollow\" target=\"_blank\">section in this link</a> titled “Handling Requests from Spark” for more background info on webhooks.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p><span style=\"text-decoration: underline;\"><strong>Step 3b: The Code</strong></span></p><p>The\r\n example webhook we just built sends all newly created messages in which\r\n the bot is mentioned to the server on port 10010 (all messages not \r\ndirected to the bot are filtered out); we’ll use a simple Python program\r\n to handle them:</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><pre class=\"python\" name=\"code\">from itty import *\r\nimport urllib2\r\nimport json\r\n\r\ndef sendSparkGET(url):\r\n&nbsp;&nbsp;&nbsp; request = urllib2.Request(url,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headers={\"Accept\" : \"application/json\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Content-Type\":\"application/json\"})\r\n&nbsp;&nbsp;&nbsp; request.add_header(\"Authorization\", \"Bearer \"+bearer)\r\n&nbsp;&nbsp;&nbsp; contents = urllib2.urlopen(request).read()\r\n&nbsp;&nbsp;&nbsp; return contents\r\n\r\n@post(\'/\')\r\ndef index(request):\r\n&nbsp;&nbsp;&nbsp; webhook = json.loads(request.body)\r\n&nbsp;&nbsp;&nbsp; print webhook[\'data\'][\'id\']\r\n&nbsp;&nbsp;&nbsp; result = sendSparkGET(\'https://api.ciscospark.com/v1/messages/{0}\'.format(webhook[\'data\'][\'id\']))\r\n&nbsp;&nbsp;&nbsp; result = json.loads(result)\r\n&nbsp;&nbsp;&nbsp; print result\r\n&nbsp;&nbsp;&nbsp; return \"true\"\r\n\r\n####CHANGE THIS VALUE#####\r\nbearer = \"BOT BEARER TOKEN HERE\"\r\n\r\nrun_itty(server=\'wsgiref\', host=\'0.0.0.0\', port=10010)\r\n\r\n\r\n\r\n\r\n\r\n\r\n</pre><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>For each message\r\n that is sent (‘created’), the data that hits your server is in a JSON \r\nformat, so parsing them is easy, thanks to the built-in ‘json’ python \r\nlibrary.&nbsp; We have a ‘result’ object that has been JSON parsed and should\r\n contain a ‘text’ field, unless it’s something like an image someone \r\nposts in the Spark room.&nbsp; That means that we can now use the ‘text’ \r\nattribute of the result object to start looking for specific commands or\r\n messages!&nbsp; We want our bot to reply to a few commands, and everyone \r\nloves Batman, so how about these three:</p><p style=\"min-height: 8pt; padding: 0px; padding-left: 30px;\">&nbsp;</p><p style=\"padding-left: 30px;\">batman</p><p style=\"padding-left: 30px;\">batcave</p><p style=\"padding-left: 30px;\">batsignal</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>Right after we print the result object, let’s add:</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><pre class=\"python\" name=\"code\">…snip…\r\nprint result\r\nif \'batman\' in result.get(\'text\', \'\').lower():\r\n&nbsp;&nbsp;&nbsp; print \"I\'m Batman!\"\r\nelif \'batcave\' in result.get(\'text\', \'\').lower():\r\n&nbsp;&nbsp;&nbsp; print \"The Batcave is silent...\"\r\nelif \'batsignal\' in result.get(\'text\', \'\').lower():\r\n&nbsp;&nbsp;&nbsp; print \"NANA NANA NANA NANA\"\r\n…snip…\r\n\r\n\r\n\r\n\r\n\r\n</pre><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>While it’s \r\nbat-tastic that our batbot can now recognize different commands, we want\r\n it to actually do something.&nbsp; Let’s have it reply to the Spark room if \r\nany of our three commands are found in the text of the Spark message.&nbsp; \r\nFirst, we’ll need a slightly different function (for HTTP POST), to send\r\n messages to a room.&nbsp; Add this below the “<span style=\"line-height: 1.5em; font-size: 10pt; font-family: Courier;\">sendSparkGET</span><span style=\"font-size: 10pt; line-height: 1.5em;\">” function:</span></p><p><span style=\"font-size: 10pt; line-height: 1.5em;\"><br></span></p><pre class=\"python\" name=\"code\">…snip…\r\ndef sendSparkPOST(url, data):\r\n&nbsp;&nbsp;&nbsp; request = urllib2.Request(url, json.dumps(data),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headers={\"Accept\" : \"application/json\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Content-Type\":\"application/json\"})\r\n&nbsp;&nbsp;&nbsp; request.add_header(\"Authorization\", \"Bearer \"+bearer)\r\n&nbsp;&nbsp;&nbsp; contents = urllib2.urlopen(request).read()\r\n&nbsp;&nbsp;&nbsp; return contents\r\n…snip…\r\n\r\n\r\n\r\n\r\n\r\n</pre><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>This function is\r\n almost identical to \"sendSparkGET\", except that it also sends data, as \r\nPOST requests do - now we can reply to the Spark room!&nbsp; Let’s go back to\r\n our if-else block and make some changes.</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><pre class=\"python\" name=\"code\">…snip…\r\nmsg = None\r\nif webhook[\'data\'][\'personEmail\'] != bot_email:\r\n&nbsp;&nbsp;&nbsp; if \'batman\' in result.get(\'text\', \'\').lower():\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg = \"I\'m Batman!\"\r\n&nbsp;&nbsp;&nbsp; elif \'batcave\' in result.get(\'text\', \'\').lower():\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg = \"The Batcave is silent...\"\r\n&nbsp;&nbsp;&nbsp; elif \'batsignal\' in result.get(\'text\', \'\').lower():\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg = \"NANA NANA NANA NANA\"\r\n&nbsp;&nbsp;&nbsp; if msg != None:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print msg\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sendSparkPOST(\"https://api.ciscospark.com/v1/messages\", {\"roomId\": webhook[\'data\'][\'roomId\'], \"text\": msg})\r\n…snip…\r\n\r\n</pre><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>With the above \r\ncode added, we now have a reply to each of our commands!&nbsp; Even better, \r\nthe use of our sendSparkPOST function passes the roomId of the room that\r\n issued the command, so we don’t have to worry about multiple webhooks \r\nfrom different rooms getting mixed up!&nbsp; To really make this bat worthy, \r\nwe might want our functions to act a little differently from each \r\nother.&nbsp; Let’s have <strong>batcave</strong> echo the message, if any text is sent after <strong>batcave</strong>.&nbsp; For example, <strong>@MrWayne batcave Hello!</strong>, should send “Hello!” back to the room… and maybe we want the <strong>batsignal</strong> to really light up the Spark room with an image.&nbsp; Here’s the full code to make all the magic happen:</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><pre class=\"python\" name=\"code\">from itty import *\r\nimport urllib2\r\nimport json\r\n\r\n\r\ndef sendSparkGET(url):\r\n&nbsp;&nbsp;&nbsp; \"\"\"\r\n&nbsp;&nbsp;&nbsp; This method is used for:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -retrieving message text, when the webhook is triggered with a message\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -Getting the username of the person who posted the message if a command is recognized\r\n&nbsp;&nbsp;&nbsp; \"\"\"\r\n&nbsp;&nbsp;&nbsp; request = urllib2.Request(url,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headers={\"Accept\" : \"application/json\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Content-Type\":\"application/json\"})\r\n&nbsp;&nbsp;&nbsp; request.add_header(\"Authorization\", \"Bearer \"+bearer)\r\n&nbsp;&nbsp;&nbsp; contents = urllib2.urlopen(request).read()\r\n&nbsp;&nbsp;&nbsp; return contents\r\n&nbsp;&nbsp; \r\ndef sendSparkPOST(url, data):\r\n&nbsp;&nbsp;&nbsp; \"\"\"\r\n&nbsp;&nbsp;&nbsp; This method is used for:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -posting a message to the Spark room to confirm that a command was received and processed\r\n&nbsp;&nbsp;&nbsp; \"\"\"\r\n&nbsp;&nbsp;&nbsp; request = urllib2.Request(url, json.dumps(data),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headers={\"Accept\" : \"application/json\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Content-Type\":\"application/json\"})\r\n&nbsp;&nbsp;&nbsp; request.add_header(\"Authorization\", \"Bearer \"+bearer)\r\n&nbsp;&nbsp;&nbsp; contents = urllib2.urlopen(request).read()\r\n&nbsp;&nbsp;&nbsp; return contents\r\n&nbsp;&nbsp; \r\n\r\n\r\n@post(\'/\')\r\ndef index(request):\r\n&nbsp;&nbsp;&nbsp; \"\"\"\r\n&nbsp;&nbsp;&nbsp; When messages come in from the webhook, they are processed here.&nbsp; The message text needs to be retrieved from Spark,\r\n&nbsp;&nbsp;&nbsp; using the sendSparkGet() function.&nbsp; The message text is parsed.&nbsp; If an expected command is found in the message,\r\n&nbsp;&nbsp;&nbsp; further actions are taken. i.e.\r\n&nbsp;&nbsp;&nbsp; /batman&nbsp;&nbsp;&nbsp; - replies to the room with text\r\n&nbsp;&nbsp;&nbsp; /batcave&nbsp;&nbsp; - echoes the incoming text to the room\r\n&nbsp;&nbsp;&nbsp; /batsignal - replies to the room with an image\r\n&nbsp;&nbsp;&nbsp; \"\"\"\r\n&nbsp;&nbsp;&nbsp; webhook = json.loads(request.body)\r\n&nbsp;&nbsp;&nbsp; print webhook[\'data\'][\'id\']\r\n&nbsp;&nbsp;&nbsp; result = sendSparkGET(\'https://api.ciscospark.com/v1/messages/{0}\'.format(webhook[\'data\'][\'id\']))\r\n&nbsp;&nbsp;&nbsp; result = json.loads(result)\r\n&nbsp;&nbsp;&nbsp; msg = None\r\n&nbsp;&nbsp;&nbsp; if webhook[\'data\'][\'personEmail\'] != bot_email:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; in_message = result.get(\'text\', \'\').lower()\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; in_message = in_message.replace(bot_name, \'\')\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if \'batman\' in in_message or \"whoareyou\" in in_message:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg = \"I\'m Batman!\"\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; elif \'batcave\' in in_message:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message = result.get(\'text\').split(\'batcave\')[1].strip(\" \")\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if len(message) &gt; 0:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg = \"The Batcave echoes, \'{0}\'\".format(message)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg = \"The Batcave is silent...\"\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; elif \'batsignal\' in in_message:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print \"NANA NANA NANA NANA\"\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sendSparkPOST(\"https://api.ciscospark.com/v1/messages\", {\"roomId\": webhook[\'data\'][\'roomId\'], \"files\": bat_signal})\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if msg != None:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print msg\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sendSparkPOST(\"https://api.ciscospark.com/v1/messages\", {\"roomId\": webhook[\'data\'][\'roomId\'], \"text\": msg})\r\n&nbsp;&nbsp;&nbsp; return \"true\"\r\n\r\n\r\n####CHANGE THESE VALUES#####\r\nbot_email = \"yourbot@sparkbot.io\"\r\nbot_name = \"yourBotDisplayName\"\r\nbearer = \"BOT BEARER TOKEN HERE\"\r\nbat_signal&nbsp; = \"https://upload.wikimedia.org/wikipedia/en/c/c6/Bat-signal_1989_film.jpg\"\r\nrun_itty(server=\'wsgiref\', host=\'0.0.0.0\', port=10010)\r\n\r\n</pre><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>Don’t forget to \r\nfill in your Bot’s auth token above.&nbsp; For Mac and Linux systems, Python \r\nis installed by default.&nbsp; For Windows, it’s a pretty easy install, just \r\nmake sure you look for version 2.7.&nbsp; To run the server application, open\r\n a command terminal, and navigate to the folder where you saved this \r\nPython script - we named ours bot_demo.py - then run:</p><p style=\"padding-left: 30px;\"><span style=\"font-size: 10pt; font-family: Courier;\"><br></span></p><p style=\"padding-left: 30px;\"><span style=\"font-size: 10pt; font-family: Courier;\">python bot_demo.py</span></p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>As long as all of the right ports are available, you should see this in the terminal:</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p style=\"padding-left: 30px;\"><span style=\"line-height: 1.5em; font-size: 10pt; font-family: \'courier new\', courier;\"><span>Listening on </span><a class=\"jive-link-external-small\" href=\"http://0.0.0.0:10010/\" rel=\"nofollow\" target=\"_blank\">http://0.0.0.0:10010</a><span>...</span></span></p><p style=\"font-size: 13.3333px; padding-left: 30px;\"><span style=\"font-size: 10pt; font-family: \'courier new\', courier;\">Use Ctrl-C to quit.</span></p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>Holy Spark-Bot, Batman!&nbsp; We’re done!</p><p style=\"min-height: 8pt; padding: 0px;\">&nbsp;</p><p>Enjoy the example - you can also get the complete code on <a class=\"jive-link-external-small\" href=\"https://github.com/ciscospark/SparkBotDemo/blob/master/bot_demo.py\" rel=\"nofollow\" target=\"_blank\">Github</a> ! <a class=\"jive-link-external-small\" href=\"https://developer.ciscospark.com/support.html\" rel=\"nofollow\" target=\"_blank\">Let us know</a> if you have any questions.</p>',NULL,'97743_bot1.png','superadmin');
/*!40000 ALTER TABLE `article` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-11-07 17:01:41
